{"version":3,"file":"knockout-decorators.esm.min.js","sources":["../src/common-functions.ts","../src/event-property.ts","../src/property-extenders.ts","../src/observable-property.ts","../src/observable-array.ts","../src/knockout-decorators.ts"],"sourcesContent":["/**\n * Copyright (c) 2016-2017 Dmitry Panyushkin\n * Available under MIT license\n */\nimport * as ko from \"knockout\";\n\nconst prefix = \"__ko_decorators_\";\n\nexport let PATCHED_KEY: string | symbol = prefix + \"patched__\";\nexport let EXTENDERS_KEY: string | symbol = prefix + \"extenders__\";\nexport let SUBSCRIPTIONS_KEY: string | symbol = prefix + \"subscriptions__\";\n\nif (typeof Symbol !== \"undefined\") {\n  PATCHED_KEY = Symbol(PATCHED_KEY);\n  EXTENDERS_KEY = Symbol(EXTENDERS_KEY);\n  SUBSCRIPTIONS_KEY = Symbol(SUBSCRIPTIONS_KEY);\n}\n\n// tslint:disable-next-line:variable-name\nexport const ArrayPrototype = Array.prototype;\n\nexport function defineProperty(instance: Object, key: any, descriptor: PropertyDescriptor) {\n  descriptor.configurable = true;\n  Object.defineProperty(instance, key, descriptor);\n}\n\nexport const extendObject = ko.utils.extend;\nexport const objectForEach = ko.utils.objectForEach;\nexport const isArray = Array.isArray.bind(Array);\nexport const getPrototypeOf = Object.getPrototypeOf.bind(Object);\nexport const getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor.bind(Object);\nexport const hasOwnProperty = Function.prototype.call.bind(Object.prototype.hasOwnProperty);\nexport const arraySlice = Function.prototype.call.bind(ArrayPrototype.slice);\n","/**\n * Copyright (c) 2016-2017 Dmitry Panyushkin\n * Available under MIT license\n */\nimport * as ko from \"knockout\";\nimport { arraySlice, defineProperty } from \"./common-functions\";\nimport { EventType } from \"./knockout-decorators\";\n\nexport function defineEventProperty(instance: Object, key: string | symbol) {\n  const subscribable = new ko.subscribable<any[]>();\n\n  const event: EventType = function () {\n    const eventArgs = arraySlice(arguments);\n    subscribable.notifySubscribers(eventArgs);\n  } as any;\n\n  event.subscribe = function (callback: Function) {\n    return subscribable.subscribe(function (eventArgs: any[]) {\n      callback.apply(null, eventArgs);\n    });\n  };\n\n  defineProperty(instance, key, {\n    value: event,\n  });\n\n  return event;\n}\n","/**\n * Copyright (c) 2016-2017 Dmitry Panyushkin\n * Available under MIT license\n */\nimport { EXTENDERS_KEY, extendObject, hasOwnProperty, objectForEach } from \"./common-functions\";\n\ntype Extender = Object | Function;\n\ninterface ExtendersDictionary {\n  [propName: string]: Extender[];\n}\n\nexport function applyExtenders(\n  instance: Object, key: string | symbol,\n  target: KnockoutObservable<any> | KnockoutComputed<any>,\n) {\n  const dictionary = instance[EXTENDERS_KEY] as ExtendersDictionary;\n  const extenders = dictionary && dictionary[key];\n  if (extenders) {\n    extenders.forEach((extender) => {\n      const koExtender = extender instanceof Function\n        ? extender.call(instance) : extender;\n\n      target = target.extend(koExtender);\n    });\n  }\n  return target;\n}\n\nexport function defineExtenders(\n  prototype: Object, key: string | symbol,\n  extendersOrFactory: Object | Function,\n) {\n  let dictionary = prototype[EXTENDERS_KEY] as ExtendersDictionary;\n  // if there is no ExtendersDictionary or ExtendersDictionary lives in base class prototype\n  if (!hasOwnProperty(prototype, EXTENDERS_KEY)) {\n    // clone ExtendersDictionary from base class prototype or create new ExtendersDictionary\n    prototype[EXTENDERS_KEY] = dictionary = extendObject({}, dictionary) as ExtendersDictionary;\n    // clone Extenders arrays for each property key\n    objectForEach(dictionary, (existingKey, extenders) => {\n      dictionary[existingKey] = [...extenders];\n    });\n  }\n  // get existing Extenders array or create new array\n  const currentExtenders = dictionary[key] || (dictionary[key] = []);\n  // add new Extenders\n  currentExtenders.push(extendersOrFactory);\n}\n","/**\n * Copyright (c) 2016-2017 Dmitry Panyushkin\n * Available under MIT license\n */\nimport * as ko from \"knockout\";\nimport {\n  defineProperty, getPrototypeOf, hasOwnProperty, isArray, objectForEach, PATCHED_KEY,\n} from \"./common-functions\";\nimport { defineObservableArray } from \"./observable-array\";\nimport { applyExtenders } from \"./property-extenders\";\n\nexport function defineObservableProperty(\n  instance: Object, key: string | symbol, value: any, deep: boolean,\n  hiddenObservable: boolean\n) {\n  const observable = applyExtenders(instance, key, ko.observable());\n\n  let setter = observable as any;\n\n  if (deep) {\n    setter = function (newValue: any) {\n      observable(prepareDeepValue(newValue, hiddenObservable));\n    };\n  }\n\n  defineProperty(instance, key, {\n    enumerable: true,\n    get: observable,\n    set: setter,\n  });\n  if (hiddenObservable) {\n    defineProperty(instance, \"_\" + key.toString(), {\n      enumerable: false,\n      value: observable\n    });\n  }\n\n\n  setter(value);\n}\n\nexport function prepareDeepValue(value: any, hiddenObservable: boolean) {\n  if (typeof value === \"object\") {\n    if (isArray(value) || value === null) {\n      // value is Array or null\n      return value;\n    } else if (hasOwnProperty(value, \"constructor\")) {\n      // there is redefined own property \"constructor\"\n      const prototype = getPrototypeOf(value);\n      if (prototype === Object.prototype || prototype === null) {\n        // value is plain Object\n        return prepareDeepObject(value, hiddenObservable);\n      }\n    } else if (value.constructor === Object) {\n      // value is plain Object\n      return prepareDeepObject(value, hiddenObservable);\n    }\n  }\n  // value is primitive, function or class instance\n  return value;\n}\n\nexport function prepareDeepObject(instance: Object, hiddenObservable: boolean) {\n  if (!hasOwnProperty(instance, PATCHED_KEY)) {\n    // mark instance as ObservableObject\n    defineProperty(instance, PATCHED_KEY, {\n      value: true,\n    });\n    // define deep observable properties\n    objectForEach(instance, (key, value) => {\n      if (isArray(value)) {\n        defineObservableArray(instance, key, value, true, hiddenObservable);\n      } else {\n        defineObservableProperty(instance, key, value, true, hiddenObservable);\n      }\n    });\n  }\n  return instance;\n}\n","/**\n * Copyright (c) 2016-2017 Dmitry Panyushkin\n * Available under MIT license\n */\nimport * as ko from \"knockout\";\nimport { ArrayPrototype, arraySlice, defineProperty, hasOwnProperty, isArray, PATCHED_KEY } from \"./common-functions\";\nimport { prepareDeepValue } from \"./observable-property\";\nimport { applyExtenders } from \"./property-extenders\";\n\ntype ObsArray = KnockoutObservableArray<any> & { [fnName: string]: Function };\n\nconst deepArrayMethods = [\"pop\", \"reverse\", \"shift\", \"sort\"];\nconst allArrayMethods = [...deepArrayMethods, \"push\", \"splice\", \"unshift\"];\n\nconst deepObservableArrayMethods = [\"remove\", \"removeAll\", \"destroy\", \"destroyAll\", \"replace\", \"subscribe\"];\nconst allObservableArrayMethods = [...deepObservableArrayMethods, \"replace\"];\n\nconst allMethods = [...allArrayMethods, ...allObservableArrayMethods, \"mutate\", \"set\"];\n\nexport function defineObservableArray(\n  instance: Object, key: string | symbol, value: any[], deep: boolean,\n  hiddenObservable: boolean\n) {\n  const obsArray = applyExtenders(instance, key, ko.observableArray()) as ObsArray;\n\n  let insideObsArray = false;\n\n  defineProperty(instance, key, {\n    enumerable: true,\n    get: obsArray,\n    set: setter,\n  });\n  if (hiddenObservable) {\n    defineProperty(instance, \"_\" + key.toString(), {\n      enumerable: false,\n      value: obsArray\n    });\n  }\n\n  setter(value);\n\n  function setter(newValue: any[]) {\n    const lastValue = obsArray.peek();\n    // if we got new value\n    if (lastValue !== newValue) {\n      if (isArray(lastValue)) {\n        // if lastValue array methods were already patched\n        if (hasOwnProperty(lastValue, PATCHED_KEY)) {\n          delete lastValue[PATCHED_KEY];\n          // clear patched array methods on lastValue (see unit tests)\n          allMethods.forEach((fnName) => {\n            delete lastValue[fnName];\n          });\n        }\n      }\n      if (isArray(newValue)) {\n        // if new value array methods were already connected with another @observable\n        if (hasOwnProperty(newValue, PATCHED_KEY)) {\n          // clone new value to prevent corruption of another @observable (see unit tests)\n          newValue = [...newValue];\n        }\n        // if deep option is set\n        if (deep) {\n          // make all array items deep observable\n          for (let i = 0; i < newValue.length; ++i) {\n            newValue[i] = prepareDeepValue(newValue[i], hiddenObservable);\n          }\n        }\n        // mark instance as ObservableArray\n        defineProperty(newValue, PATCHED_KEY, {\n          value: true,\n        });\n        // call ko.observableArray.fn[fnName] instead of Array.prototype[fnName]\n        patchArrayMethods(newValue);\n      }\n    }\n    // update obsArray contents\n    insideObsArray = true;\n    obsArray(newValue);\n    insideObsArray = false;\n  }\n\n  function patchArrayMethods(array: any[]) {\n    const arrayMethods = deep ? deepArrayMethods : allArrayMethods;\n\n    arrayMethods.forEach((fnName) => defineProperty(array, fnName, {\n      value() {\n        if (insideObsArray) {\n          return ArrayPrototype[fnName].apply(array, arguments);\n        }\n        insideObsArray = true;\n        const result = obsArray[fnName].apply(obsArray, arguments);\n        insideObsArray = false;\n        return result;\n      },\n    }));\n\n    const observableArrayMethods = deep ? deepObservableArrayMethods : allObservableArrayMethods;\n\n    observableArrayMethods.forEach((fnName) => defineProperty(array, fnName, {\n      value() {\n        insideObsArray = true;\n        const result = obsArray[fnName].apply(obsArray, arguments);\n        insideObsArray = false;\n        return result;\n      },\n    }));\n\n    if (deep) {\n      defineProperty(array, \"push\", {\n        value() {\n          if (insideObsArray) {\n            return ArrayPrototype.push.apply(array, arguments);\n          }\n          const args = arraySlice(arguments);\n          for (let i = 0; i < args.length; ++i) {\n            args[i] = prepareDeepValue(args[i], hiddenObservable);\n          }\n          insideObsArray = true;\n          const result = obsArray.push.apply(obsArray, args);\n          insideObsArray = false;\n          return result;\n        },\n      });\n\n      defineProperty(array, \"unshift\", {\n        value() {\n          if (insideObsArray) {\n            return ArrayPrototype.unshift.apply(array, arguments);\n          }\n          const args = arraySlice(arguments);\n          for (let i = 0; i < args.length; ++i) {\n            args[i] = prepareDeepValue(args[i], hiddenObservable);\n          }\n          insideObsArray = true;\n          const result = obsArray.unshift.apply(obsArray, args);\n          insideObsArray = false;\n          return result;\n        },\n      });\n\n      defineProperty(array, \"splice\", {\n        value() {\n          if (insideObsArray) {\n            return ArrayPrototype.splice.apply(array, arguments);\n          }\n\n          let result: any[];\n\n          insideObsArray = true;\n          switch (arguments.length) {\n            case 0:\n            case 1:\n            case 2: {\n              result = obsArray.splice.apply(obsArray, arguments);\n              break;\n            }\n            case 3: {\n              result = obsArray.splice(\n                arguments[0], arguments[1], prepareDeepValue(arguments[2], hiddenObservable),\n              );\n              break;\n            }\n            default: {\n              const args = arraySlice(arguments);\n              for (let i = 2; i < args.length; ++i) {\n                args[i] = prepareDeepValue(args[i], hiddenObservable);\n              }\n              result = obsArray.splice.apply(obsArray, arguments);\n              break;\n            }\n          }\n          insideObsArray = false;\n\n          return result;\n        },\n      });\n\n      defineProperty(array, \"replace\", {\n        value(oldItem: any, newItem: any) {\n          insideObsArray = true;\n          const result = obsArray.replace(oldItem, prepareDeepValue(newItem, hiddenObservable));\n          insideObsArray = false;\n          return result;\n        },\n      });\n\n      defineProperty(array, \"mutate\", {\n        value(mutator: (array?: any[]) => void) {\n          const nativeArray = obsArray.peek();\n          // it is defined for ko.observableArray\n          (obsArray.valueWillMutate as Function)();\n          mutator(nativeArray);\n          for (let i = 0; i < nativeArray.length; ++i) {\n            nativeArray[i] = prepareDeepValue(nativeArray[i], hiddenObservable);\n          }\n          // it is defined for ko.observableArray\n          (obsArray.valueHasMutated as Function)();\n        },\n      });\n\n      defineProperty(array, \"set\", {\n        value(index: number, newItem: any) {\n          return obsArray.splice(index, 1, prepareDeepValue(newItem, hiddenObservable))[0];\n        },\n      });\n    } else {\n      defineProperty(array, \"mutate\", {\n        value(mutator: (array?: any[]) => void) {\n          // it is defined for ko.observableArray\n          (obsArray.valueWillMutate as Function)();\n          mutator(obsArray.peek());\n          // it is defined for ko.observableArray\n          (obsArray.valueHasMutated as Function)();\n        },\n      });\n\n      defineProperty(array, \"set\", {\n        value(index: number, newItem: any) {\n          return obsArray.splice(index, 1, newItem)[0];\n        },\n      });\n    }\n  }\n}\n","/**\n * Copyright (c) 2016-2017 Dmitry Panyushkin\n * Available under MIT license\n * Version: 1.0.1\n */\nimport * as ko from \"knockout\";\nimport {\n  defineProperty, extendObject, getOwnPropertyDescriptor, hasOwnProperty, isArray, PATCHED_KEY, SUBSCRIPTIONS_KEY,\n} from \"./common-functions\";\nimport { defineEventProperty } from \"./event-property\";\nimport { defineObservableArray } from \"./observable-array\";\nimport { defineObservableProperty } from \"./observable-property\";\nimport { applyExtenders, defineExtenders } from \"./property-extenders\";\n\n/**\n * Property decorator that creates hidden (shallow or deep) ko.observable with ES6 getter and setter for it\n * If initialized by Array then hidden ko.observableArray will be created\n */\nexport function observable(options: { deep: boolean, hiddenObservable: boolean }): PropertyDecorator;\n/**\n * Property decorator that creates hidden (shallow) ko.observable with ES6 getter and setter for it\n * If initialized by Array then hidden (shallow) ko.observableArray will be created\n */\nexport function observable(prototype: Object, key: string | symbol): void;\n/**\n * Property decorator that creates hidden (shallow or deep) ko.observable with ES6 getter and setter for it\n * If initialized by Array then hidden (shallow or deep) ko.observableArray will be created\n */\nexport function observable(prototypeOrOptions: any, key?: any) {\n  observableArrayOption = false;\n  deepObservableOption = false;\n  hiddenObservablePropertyOption = false;\n  if (arguments.length === 1) {\n    deepObservableOption = prototypeOrOptions.deep;\n    hiddenObservablePropertyOption = prototypeOrOptions.hiddenObservable;\n    return observableDecorator;\n  }\n  return observableDecorator(prototypeOrOptions, key);\n}\n\n/**\n * Property decorator that creates hidden (shallow or deep) ko.observableArray with ES6 getter and setter for it\n */\nexport function observableArray(options: { deep: boolean }): PropertyDecorator;\n/**\n * Property decorator that creates hidden (shallow) ko.observableArray with ES6 getter and setter for it\n */\nexport function observableArray(prototype: Object, key: string | symbol): void;\n/**\n * Property decorator that creates hidden (shallow or deep) ko.observableArray with ES6 getter and setter for it\n */\nexport function observableArray(prototypeOrOptions: any, key?: any) {\n  observableArrayOption = true;\n  deepObservableOption = false;\n  hiddenObservablePropertyOption = false;\n  if (arguments.length === 1) {\n    deepObservableOption = prototypeOrOptions.deep;\n    hiddenObservablePropertyOption = prototypeOrOptions.hiddenObservable;\n    return observableDecorator;\n  }\n  return observableDecorator(prototypeOrOptions, key);\n}\n\n// observableDecorator options\nlet observableArrayOption: boolean;\nlet deepObservableOption: boolean;\nlet hiddenObservablePropertyOption: boolean;\n\nfunction observableDecorator(prototype: Object, propKey: string | symbol) {\n  const array = observableArrayOption;\n  const deep = deepObservableOption;\n  const hiddenObservable = hiddenObservablePropertyOption;\n  defineProperty(prototype, propKey, {\n    get() {\n      throw new Error(\"@observable property '\" + propKey.toString() + \"' was not initialized\");\n    },\n    set(this: Object, value: any) {\n      if (array || isArray(value)) {\n        defineObservableArray(this, propKey, value, deep, hiddenObservable);\n      } else {\n        defineObservableProperty(this, propKey, value, deep, hiddenObservable);\n      }\n    },\n  });\n}\n\nexport interface ObservableArray<T> extends Array<T> {\n  replace(oldItem: T, newItem: T): void;\n\n  remove(item: T): T[];\n  remove(removeFunction: (item: T) => boolean): T[];\n\n  removeAll(): T[];\n  removeAll(items: T[]): T[];\n\n  destroy(item: T): void;\n  destroy(destroyFunction: (item: T) => boolean): void;\n\n  destroyAll(): void;\n  destroyAll(items: T[]): void;\n\n  subscribe(callback: (val: T[]) => void): KnockoutSubscription;\n  subscribe(callback: (val: T[]) => void, callbackTarget: any): KnockoutSubscription;\n  subscribe(callback: (val: any[]) => void, callbackTarget: any, event: string): KnockoutSubscription;\n\n  /**\n   * Run mutator function that can write to array at some index (`array[index] = value;`)\n   * Then notify about observableArray changes\n   */\n  mutate(mutator: (arrayValue: T[]) => void): void;\n\n  /**\n   * Replace value at some index and return old value\n   */\n  set(index: number, value: T): T;\n}\n\n/*---------------------------------------------------------------------------*/\n\n/**\n * Accessor decorator that wraps ES6 getter to hidden ko.computed or ko.pureComputed\n *\n * Setter is not wrapped to hidden ko.pureComputed and stays unchanged\n *\n * But we can still extend getter @computed by extenders like { rateLimit: 500 }\n */\nexport function computed(options: { pure: boolean }): PropertyDecorator;\n/**\n * Accessor decorator that wraps ES6 getter to hidden ko.pureComputed\n *\n * Setter is not wrapped to hidden ko.pureComputed and stays unchanged\n *\n * But we can still extend getter @computed by extenders like { rateLimit: 500 }\n */\nexport function computed(prototype: Object, key: string | symbol, desc?: PropertyDescriptor): PropertyDescriptor;\n/**\n * Accessor decorator that wraps ES6 getter to hidden ko.computed or ko.pureComputed\n *\n * Setter is not wrapped to hidden ko.pureComputed and stays unchanged\n *\n * But we can still extend getter @computed by extenders like { rateLimit: 500 }\n */\nexport function computed(prototypeOrOptinos: any, key?: any, propDesc?: any): any {\n  computedDecoratorOptions = { pure: true };\n\n  if (arguments.length === 1) {\n    computedDecoratorOptions = prototypeOrOptinos;\n    return computedDecorator;\n  }\n  return computedDecorator(prototypeOrOptinos, key, propDesc);\n}\n\n// computedDecorator options\nlet computedDecoratorOptions: { pure: boolean };\n\nfunction computedDecorator(prototype: Object, propKey: string | symbol, desc: PropertyDescriptor) {\n  const options = computedDecoratorOptions;\n  const { get, set } = desc || (desc = getOwnPropertyDescriptor(prototype, propKey));\n  if (!get) {\n    throw new Error(\"@computed property '\" + propKey.toString() + \"' has no getter\");\n  }\n  desc.get = function (this: Object) {\n    const koComputed = applyExtenders(this, propKey, ko.computed(get, this, options));\n    defineProperty(this, propKey, {\n      get: koComputed,\n      // tslint:disable-next-line:object-literal-shorthand\n      set: set,\n    });\n    return koComputed();\n  };\n  return desc;\n}\n\n/*---------------------------------------------------------------------------*/\n\n/**\n * Apply extenders to decorated @observable\n */\nexport function extend(extenders: Object): PropertyDecorator;\n/**\n * Apply extenders to decorated @observable\n */\nexport function extend(extendersFactory: () => Object): PropertyDecorator;\n/**\n * Apply extenders to decorated @observable\n * @extendersOrFactory { Object | Function } Knockout extenders definition or factory that produces definition\n */\nexport function extend(extendersOrFactory: Object | Function) {\n  return function (prototype: Object, key: string | symbol) {\n    defineExtenders(prototype, key, extendersOrFactory);\n  };\n}\n\n/*---------------------------------------------------------------------------*/\n\nexport type ComponentConstructor = new (\n  params?: any,\n  element?: Node,\n  templateNodes?: Node[],\n) => any;\n\nexport type ComponentDecorator = (constructor: ComponentConstructor) => void;\n\nexport type TemplateConfig = (\n  string\n  | Node[]\n  | DocumentFragment\n  | { require: string }\n  | { element: string | Node }\n);\n\n/**\n * Register Knockout component by decorating ViewModel class\n */\nexport function component(\n  name: string,\n  options?: Object,\n): ComponentDecorator;\n/**\n * Register Knockout component by decorating ViewModel class\n */\nexport function component(\n  name: string,\n  template: TemplateConfig,\n  options?: Object,\n): ComponentDecorator;\n/**\n * Register Knockout component by decorating ViewModel class\n */\nexport function component(\n  name: string,\n  template: TemplateConfig,\n  styles: string | string[],\n  options?: Object,\n): ComponentDecorator;\n/**\n * Register Knockout component by decorating ViewModel class\n * @param name {String} Name of component\n * @param template {Any} Knockout template definition\n * @param styles {Any} Ignored parameter (used for `require()` styles by webpack etc.)\n * @param options {Object} Another options that passed directly to `ko.components.register()`\n */\nexport function component(\n  name: string,\n  template?: any,\n  styles?: any,\n  options?: Object,\n) {\n  if (options === void 0) {\n    if (styles === void 0) {\n      if (typeof template === \"object\"\n        && template.constructor === Object\n        && !(\"require\" in template)\n        && !(\"element\" in template)\n      ) {\n        options = template;\n        template = void 0;\n      }\n    } else if (typeof styles === \"object\") {\n      options = styles;\n      styles = void 0;\n    }\n  }\n\n  return function (constructor: ComponentConstructor) {\n    ko.components.register(name, extendObject({\n      viewModel: constructor.length < 2 ? constructor : {\n        createViewModel(params: any, {\n          element, templateNodes,\n        }: {\n            element: Node, templateNodes: Node[],\n          }) {\n          return new constructor(params, element, templateNodes);\n        },\n      },\n      template: template || \"<!---->\",\n      synchronous: true,\n    }, options as Object));\n  };\n}\n\n/*---------------------------------------------------------------------------*/\n\n/**\n * Like https://github.com/jayphelps/core-decorators.js @autobind but less smart and complex\n * Do NOT use with ES6 inheritance!\n */\nexport function autobind(prototype: Object, key: string | symbol, desc?: PropertyDescriptor) {\n  const { value, configurable, enumerable } = desc || (desc = getOwnPropertyDescriptor(prototype, key));\n  return {\n    // tslint:disable-next-line:object-literal-shorthand\n    configurable: configurable,\n    // tslint:disable-next-line:object-literal-shorthand\n    enumerable: enumerable,\n    get(this: Object) {\n      if (this === prototype) {\n        return value;\n      }\n      const bound = value.bind(this);\n      defineProperty(this, key, {\n        value: bound,\n      });\n      return bound;\n    },\n  } as PropertyDescriptor;\n}\n\n/*---------------------------------------------------------------------------*/\n\n/**\n * Define hidden ko.subscribable, that notifies subscribers when decorated method is invoked\n */\nexport function event(prototype: Object, key: string | symbol) {\n  defineProperty(prototype, key, {\n    get(this: Object) {\n      return defineEventProperty(this, key);\n    },\n  });\n}\n\nexport type EventType = Function & {\n  subscribe(callback: Function): KnockoutSubscription;\n};\n\n/*---------------------------------------------------------------------------*/\n\n/**\n * Subscribe callback to `@observable` or `@computed` dependency changes or to some `@event` property\n */\nexport function subscribe<T>(\n  dependencyOrEvent: () => T,\n  callback: (value: T) => void,\n  options?: { once?: boolean, event?: \"change\" | \"beforeChange\" },\n): KnockoutSubscription;\n/**\n * Subscribe callback to `@observableArray` dependency \"arrayChange\" event\n */\nexport function subscribe<T>(\n  dependency: () => T[],\n  callback: (value: {\n    status: \"added\" | \"deleted\";\n    value: T;\n    index: number;\n  }[]) => void,\n  options: { once?: boolean, event: \"arrayChange\" },\n): KnockoutSubscription;\n/**\n * Subscribe callback to some `@event` property\n */\nexport function subscribe<T>(\n  event: (arg: T) => void,\n  callback: (arg: T) => void,\n  options?: { once?: boolean },\n): KnockoutSubscription;\n/**\n * Subscribe callback to some `@event` property\n */\nexport function subscribe<T1, T2>(\n  event: (arg1: T1, arg2: T2) => void,\n  callback: (arg1: T1, arg2: T2) => void,\n  options?: { once?: boolean },\n): KnockoutSubscription;\n/**\n * Subscribe callback to some `@event` property\n */\nexport function subscribe<T1, T2, T3>(\n  event: (arg1: T1, arg2: T2, arg3: T3, ...args: any[]) => void,\n  callback: (arg1: T1, arg2: T2, arg3: T3, ...args: any[]) => void,\n  options?: { once?: boolean },\n): KnockoutSubscription;\n/**\n * Subscribe callback to `@observable` or `@computed` dependency changes or to some `@event`\n */\nexport function subscribe(\n  dependencyOrEvent: Function,\n  callback: (...args: any[]) => void,\n  options?: { once?: boolean, event?: \"change\" | \"beforeChange\" | \"arrayChange\" },\n) {\n  const once = options && options.once || false;\n\n  if (hasOwnProperty(dependencyOrEvent, \"subscribe\")) {\n    // overload: subscribe to @event property\n    const eventFunc = dependencyOrEvent as EventType;\n\n    if (once) {\n      const subscription = eventFunc.subscribe(function () {\n        subscription.dispose();\n        callback.apply(null, arguments);\n      });\n      return subscription;\n    } else {\n      return eventFunc.subscribe(callback);\n    }\n  } else {\n    // overload: subscribe to @observable or @computed\n    const eventFunc = options && options.event || \"change\";\n\n    let handler: (value: any) => void;\n    let subscription: KnockoutSubscription;\n\n    if (once) {\n      handler = function () {\n        subscription.dispose();\n        callback.apply(null, arguments);\n      };\n    } else {\n      handler = callback;\n    }\n\n    if (eventFunc === \"arrayChange\") {\n      const obsArray = dependencyOrEvent() as ObservableArray<any>;\n\n      if (isArray(obsArray) && hasOwnProperty(obsArray, PATCHED_KEY)) {\n        subscription = obsArray.subscribe(handler, null, eventFunc);\n      } else {\n        throw new Error(\"Can not subscribe to 'arrayChange' because dependency is not an 'observableArray'\");\n      }\n    } else {\n      const koComputed = ko.computed(dependencyOrEvent as () => any);\n\n      subscription = koComputed.subscribe(handler, null, eventFunc);\n\n      const originalDispose = subscription.dispose;\n      // dispose hidden computed with subscription\n      subscription.dispose = function (this: KnockoutSubscription) {\n        originalDispose.call(this);\n        koComputed.dispose();\n      };\n    }\n    return subscription;\n  }\n}\n\n/*---------------------------------------------------------------------------*/\n\n/**\n * Get internal ko.observable() for object property decodated by @observable\n */\nexport function unwrap(instance: Object, key: string | symbol): any;\n/**\n * Get internal ko.observable() for object property decodated by @observable\n */\nexport function unwrap<T>(instance: Object, key: string | symbol): KnockoutObservable<T>;\n/**\n * Get internal ko.observable() for object property decodated by @observable\n */\nexport function unwrap(instance: Object, key: string | symbol) {\n  if (!hasOwnProperty(instance, key)) {\n    // invoke getter on instance.__proto__ that defines property on instance\n    // tslint:disable-next-line:no-unused-expression\n    instance[key];\n  }\n  return getOwnPropertyDescriptor(instance, key).get;\n}\n\n/*---------------------------------------------------------------------------*/\n/**\n * Mixin which add `subscribe()` instance method and implement `dispose()` method,\n * that disposes all subscription created by `subscribe()`\n */\nexport interface Disposable {\n  /** Dispose all subscriptions from this class */\n  dispose(): void;\n\n  /** Subscribe callback to `@observable` or `@computed` dependency changes or to some `@event` property */\n  subscribe<T>(\n    dependencyOrEvent: () => T,\n    callback: (value: T) => void,\n    options?: { once?: boolean, event?: \"change\" | \"beforeChange\" },\n  ): KnockoutSubscription;\n  /** Subscribe callback to `@observableArray` dependency \"arrayChange\" event */\n  subscribe<T>(\n    dependency: () => T[],\n    callback: (value: {\n      status: \"added\" | \"deleted\";\n      value: T;\n      index: number;\n    }[]) => void,\n    options: { once?: boolean, event: \"arrayChange\" },\n  ): KnockoutSubscription;\n  /** Subscribe callback to some `@event` property */\n  subscribe<T>(\n    event: (arg: T) => void,\n    callback: (arg: T) => void,\n    options?: { once?: boolean },\n  ): KnockoutSubscription;\n  /** Subscribe callback to some `@event` property */\n  subscribe<T1, T2>(\n    event: (arg1: T1, arg2: T2) => void,\n    callback: (arg1: T1, arg2: T2) => void,\n    options?: { once?: boolean },\n  ): KnockoutSubscription;\n  /** Subscribe callback to some `@event` property */\n  subscribe<T1, T2, T3>(\n    event: (arg1: T1, arg2: T2, arg3: T3, ...args: any[]) => void,\n    callback: (arg1: T1, arg2: T2, arg3: T3, ...args: any[]) => void,\n    options?: { once?: boolean },\n  ): KnockoutSubscription;\n\n  /** Get internal ko.observable() for class property decodated by `@observable` */\n  unwrap(key: string | symbol): any;\n  /** Get internal ko.observable() for class property decodated by `@observable` */\n  unwrap<T>(key: string | symbol): KnockoutObservable<T>;\n}\n\n/**\n * Mixin which add `subscribe()` instance method and implement `dispose()` method,\n * that disposes all subscription created by `subscribe()`\n */\nexport function Disposable(): new () => Disposable;\n/**\n * Mixin which add `subscribe()` instance method and implement `dispose()` method,\n * that disposes all subscription created by `subscribe()`\n * @param Base {Function} Base class to extend\n */\nexport function Disposable<T extends Function>(\n  // tslint:disable-next-line:variable-name\n  Base: T,\n): (new (...args: any[]) => Disposable) & T;\n/**\n * Mixin which add `subscribe()` instance method and implement `dispose()` method,\n * that disposes all subscription created by `subscribe()`\n * @param Base {Function} Base class to extend\n */\nexport function Disposable<T extends new (...args: any[]) => any>(\n  // tslint:disable-next-line:variable-name\n  Base?: T,\n) {\n  if (typeof Base === \"undefined\") {\n    Base = class { } as T;\n  }\n  return class extends Base {\n    /** Dispose all subscriptions from this class */\n    dispose() {\n      const subscriptions: KnockoutSubscription[] = this[SUBSCRIPTIONS_KEY];\n      if (subscriptions) {\n        subscriptions.forEach((subscription) => {\n          subscription.dispose();\n        });\n        delete this[SUBSCRIPTIONS_KEY];\n      }\n    }\n\n    /** Subscribe callback to `@observable` or `@computed` dependency changes or to some `@event` */\n    subscribe() {\n      const subscription: KnockoutSubscription = subscribe.apply(null, arguments);\n      const subscriptions: KnockoutSubscription[] = this[SUBSCRIPTIONS_KEY] || (this[SUBSCRIPTIONS_KEY] = []);\n      subscriptions.push(subscription);\n      return subscription;\n    }\n\n    /** Get internal ko.observable() for class property decodated by `@observable` */\n    unwrap(key: string) {\n      return unwrap(this, key);\n    }\n  };\n}\n"],"names":["prefix","PATCHED_KEY","EXTENDERS_KEY","SUBSCRIPTIONS_KEY","Symbol","ArrayPrototype","Array","prototype","instance","key","descriptor","configurable","Object","defineProperty","extendObject","ko.utils","extend","objectForEach","isArray","bind","getPrototypeOf","getOwnPropertyDescriptor","hasOwnProperty","Function","call","arraySlice","slice","subscribable","ko.subscribable","event","eventArgs","arguments","notifySubscribers","subscribe","callback","apply","value","target","dictionary","extenders","forEach","extender","koExtender","extendersOrFactory","existingKey","push","deep","hiddenObservable","observable","applyExtenders","ko.observable","setter","newValue","prepareDeepValue","enumerable","get","set","toString","prepareDeepObject","constructor","defineObservableArray","defineObservableProperty","deepArrayMethods","allArrayMethods","deepObservableArrayMethods","allObservableArrayMethods","allMethods","obsArray","ko.observableArray","insideObsArray","lastValue","peek","fnName","i","length","array","[object Object]","result","args","unshift","splice","oldItem","newItem","replace","mutator","nativeArray","valueWillMutate","valueHasMutated","index","prototypeOrOptions","observableArrayOption","deepObservableOption","hiddenObservablePropertyOption","observableDecorator","computedDecoratorOptions","propKey","Error","this","prototypeOrOptinos","propDesc","pure","computedDecorator","desc","options","koComputed","ko.computed","defineExtenders","name","template","styles","ko.components","register","viewModel","createViewModel","params","element","templateNodes","synchronous","bound","defineEventProperty","dependencyOrEvent","once","eventFunc","subscription","dispose","handler","originalDispose","Base","subscriptions","unwrap"],"mappings":"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"}