{"version":3,"file":null,"sources":["../src/knockout-decorators.ts"],"sourcesContent":["/**\r\n * Copyright (c) 2016 Dmitry Panyushkin\r\n * Available under MIT license\r\n */\r\nimport * as ko from \"knockout\";\r\n\r\nconst assign = ko.utils.extend;\r\nconst objectForEach = ko.utils.objectForEach;\r\nconst defProp = Object.defineProperty.bind(Object);\r\nconst getDescriptor = Object.getOwnPropertyDescriptor.bind(Object);\r\nconst hasOwnProperty = Function.prototype.call.bind(Object.prototype.hasOwnProperty);\r\nconst slice = Function.prototype.call.bind(Array.prototype.slice);\r\n\r\n/*===========================================================================*/\r\n\r\nexport interface ComponentConstructor {\r\n    new (\r\n        params?: any,\r\n        element?: Node,\r\n        templateNodes?: Node[]\r\n    ): any;\r\n}\r\n\r\nexport type ComponentDecorator = (constructor: ComponentConstructor) => void;\r\n\r\nexport type TemplateConfig = (\r\n    string\r\n    | Node[] \r\n    | DocumentFragment \r\n    | { require: string }\r\n    | { element: string | Node }\r\n);\r\n\r\n/**\r\n * Register Knockout component by decorating ViewModel class\r\n */\r\nexport function component(\r\n    name: string,\r\n    options?: Object\r\n): ComponentDecorator;\r\nexport function component(\r\n    name: string,\r\n    template: TemplateConfig,\r\n    options?: Object\r\n): ComponentDecorator;\r\nexport function component(\r\n    name: string,\r\n    template: TemplateConfig,\r\n    styles: string | string[],\r\n    options?: Object\r\n): ComponentDecorator;\r\n\r\n/**\r\n * Register Knockout component by decorating ViewModel class\r\n * @param name { String } Name of component\r\n * @param template { Any } Knockout template definition\r\n * @param styles { Any } Ignored parameter (used for `require()` styles by webpack etc.)\r\n * @param options { Object } Another options that passed directly to `ko.components.register()`\r\n */\r\nexport function component(\r\n    name: string,\r\n    template?: any,\r\n    styles?: any,\r\n    options?: Object\r\n) {\r\n    if (options === void 0) {\r\n        if (styles === void 0) {\r\n            if (typeof template === \"object\"\r\n                && template.constructor === Object\r\n                && !(\"require\" in template)\r\n                && !(\"element\" in template)\r\n            ) {\r\n                options = template;\r\n                template = void 0;\r\n            }\r\n        } else if (typeof styles === \"object\") {\r\n            options = styles;\r\n            styles = void 0;\r\n        }\r\n    }\r\n\r\n    return function (constructor: ComponentConstructor) {\r\n        ko.components.register(name, assign({\r\n            viewModel: constructor.length < 2 ? constructor : {\r\n                createViewModel(params, { element, templateNodes }) {\r\n                    return new constructor(params, element, templateNodes);\r\n                }\r\n            },\r\n            template: template || \"<!---->\",\r\n            synchronous: true,\r\n        }, options));\r\n    }\r\n}\r\n\r\n/*===========================================================================*/\r\n\r\n/**\r\n * Property decorator that creates hidden ko.observable with ES6 getter and setter for it\r\n */\r\nexport function observable(prototype: Object, key: string | symbol) {\r\n    defProp(prototype, key, {\r\n        configurable: true,\r\n        get() {\r\n            const observable = applyExtenders(this, key, ko.observable());\r\n            defProp(this, key, {\r\n                configurable: true,\r\n                enumerable: true,\r\n                get: observable,\r\n                set: observable,\r\n            });\r\n            return observable();\r\n        },\r\n        set(value) {\r\n            const observable = applyExtenders(this, key, ko.observable());\r\n            defProp(this, key, {\r\n                configurable: true,\r\n                enumerable: true,\r\n                get: observable,\r\n                set: observable,\r\n            });\r\n            observable(value);\r\n        },\r\n    });\r\n}\r\n\r\n/*===========================================================================*/\r\n\r\n/**\r\n * Accessor decorator that wraps ES6 getter to hidden ko.pureComputed\r\n * \r\n * Setter is not wrapped to hidden ko.pureComputed and stays unchanged\r\n *\r\n * But we can still extend getter @computed by extenders like { rateLimit: 500 } \r\n */\r\nexport function computed(prototype: Object, key: string | symbol, desc: PropertyDescriptor) {\r\n    const { get, set } = desc || (desc = getDescriptor(prototype, key));\r\n    desc.get = function () {\r\n        const computed = applyExtenders(this, key, ko.pureComputed(get, this));\r\n        defProp(this, key, {\r\n            configurable: true,\r\n            get: computed,\r\n            set: set\r\n        });\r\n        return computed();\r\n    };\r\n    return desc;\r\n    // TODO: make @computed extendable (by @extend decorator)\r\n}\r\n\r\n/*===========================================================================*/\r\n\r\ntype ObsArray = KnockoutObservableArray<any> & { [fnName: string]: Function };\r\n\r\nconst arrayMethods = [\"pop\", \"push\", \"reverse\", \"shift\", \"sort\", \"splice\", \"unshift\"];\r\nconst observableArrayMethods = [\"remove\", \"removeAll\", \"destroy\", \"destroyAll\", \"replace\", \"subscribe\"];\r\n\r\nfunction defObservableArray(instance: Object, key: string | symbol) {\r\n    const obsArray = applyExtenders(instance, key, ko.observableArray()) as ObsArray;\r\n    \r\n    let insideObsArray = false;\r\n\r\n    defProp(instance, key, {\r\n        configurable: true,\r\n        enumerable: true,\r\n        get: obsArray,\r\n        set(value: any[]) {\r\n            const lastValue = obsArray.peek();\r\n            // if we got new value\r\n            if (lastValue !== value) {\r\n                if (Array.isArray(lastValue)) {\r\n                    // if lastValue array methods were already patched\r\n                    if (hasOwnProperty(lastValue, \"subscribe\")) {\r\n                        // clear patched array methods on lastValue (see unit tests)\r\n                        clearArrayMethods(lastValue);\r\n                    }\r\n                }\r\n                if (Array.isArray(value)) {\r\n                    // if new value array methods were already connected with another @observableArray\r\n                    if (hasOwnProperty(value, \"subscribe\")) {\r\n                        // clone new value to prevent corruption of another @observableArray (see unit tests)\r\n                        value = slice(value);\r\n                    }\r\n                    // call ko.observableArray.fn[fnName] instead of Array.prototype[fnName]\r\n                    patchArrayMethods(value);\r\n                }\r\n            }\r\n            insideObsArray = true;\r\n            obsArray(value);\r\n            insideObsArray = false;\r\n        }\r\n    });\r\n\r\n    function patchArrayMethods(array: any[]) {\r\n        arrayMethods.forEach(fnName => defProp(array, fnName, {\r\n            configurable: true,\r\n            value() {\r\n                if (insideObsArray) {\r\n                    return Array.prototype[fnName].apply(array, arguments);\r\n                }\r\n                insideObsArray = true;\r\n                const result = obsArray[fnName].apply(obsArray, arguments);\r\n                insideObsArray = false;\r\n                return result;\r\n            }\r\n        }));\r\n        observableArrayMethods.forEach(fnName => defProp(array, fnName, {\r\n            configurable: true,\r\n            value() {\r\n                insideObsArray = true;\r\n                const result = obsArray[fnName].apply(obsArray, arguments);\r\n                insideObsArray = false;\r\n                return result;\r\n            }\r\n        }));\r\n    }\r\n}\r\n\r\n// moved outside of defObservableArray function to prevent creation of unnecessary closure\r\nfunction clearArrayMethods(array: any[]) {\r\n    arrayMethods.forEach(fnName => {\r\n        delete array[fnName]; \r\n    });\r\n    observableArrayMethods.forEach(fnName => {\r\n        delete array[fnName]; \r\n    });\r\n}\r\n\r\n/**\r\n * Property decorator that creates hidden ko.observableArray with ES6 getter and setter for it\r\n */\r\nexport function observableArray(prototype: Object, key: string | symbol) {\r\n    defProp(prototype, key, {\r\n        configurable: true,\r\n        get() {\r\n            defObservableArray(this, key);\r\n            this[key] = [];\r\n            return this[key];\r\n        },\r\n        set(value: any[]) {\r\n            defObservableArray(this, key);\r\n            this[key] = value;\r\n        },\r\n    });\r\n}\r\n\r\nexport interface ObservableArray<T> extends Array<T> {\r\n    replace(oldItem: T, newItem: T): void;\r\n\r\n    remove(item: T): T[];\r\n    remove(removeFunction: (item: T) => boolean): T[];\r\n    \r\n    removeAll(): T[];\r\n    removeAll(items: T[]): T[];\r\n\r\n    destroy(item: T): void;\r\n    destroy(destroyFunction: (item: T) => boolean): void;\r\n    \r\n    destroyAll(): void;\r\n    destroyAll(items: T[]): void;\r\n\r\n    subscribe(callback: (val: T[]) => void): KnockoutSubscription;\r\n    subscribe(callback: (val: T[]) => void, callbackTarget: any): KnockoutSubscription;\r\n    subscribe(callback: (val: any[]) => void, callbackTarget: any, event: string): KnockoutSubscription;\r\n}\r\n\r\n/*===========================================================================*/\r\n\r\nconst DECORATORS_KEY = typeof Symbol !== \"undefined\"\r\n    ? Symbol(\"ko_decorators\") : \"__ko_decorators__\";\r\n\r\ntype Extender = Object | Function;\r\n\r\ninterface MetaData {\r\n    [propName: string]: Extender[];\r\n}\r\n\r\nfunction getOrCreateMetaData(prototype: Object) {\r\n    let metaData: MetaData = prototype[DECORATORS_KEY];\r\n    if (!prototype.hasOwnProperty(DECORATORS_KEY)) {\r\n        // clone MetaData from base class prototype\r\n        prototype[DECORATORS_KEY] = metaData = assign({}, metaData) as MetaData;\r\n        // clone extenders arrays for each property key\r\n        objectForEach(metaData, (key, extenders) => {\r\n            metaData[key] = [...extenders];\r\n        });\r\n    }\r\n    return metaData;\r\n}\r\n\r\nfunction getOrCreateExtenders(metaData: MetaData, key: string | symbol) {\r\n    return metaData[key] || (metaData[key] = []);\r\n}\r\n\r\nfunction applyExtenders(\r\n    instance: Object, key: string | symbol,\r\n    target: KnockoutObservable<any> | KnockoutComputed<any>\r\n) {\r\n    const metaData: MetaData = instance[DECORATORS_KEY];\r\n    const extenders = metaData && metaData[key];\r\n    if (extenders) {\r\n        extenders.forEach(extender => {\r\n            const koExtender = extender instanceof Function\r\n                ? extender.call(instance) : extender;\r\n\r\n            target = target.extend(koExtender);\r\n        });\r\n    }\r\n    return target;\r\n}\r\n\r\n/**\r\n * Apply extenders to decorated @observable\r\n */\r\nexport function extend(extenders: Object): PropertyDecorator;\r\nexport function extend(extendersFactory: () => Object): PropertyDecorator;\r\n\r\n/**\r\n * Apply extenders to decorated @observable\r\n * @extendersOrFactory { Object | Function } Knockout extenders definition or factory that produces definition\r\n */\r\nexport function extend(extendersOrFactory: Object | Function) {\r\n    return function (prototype: Object, key: string | symbol) {\r\n        const medaData = getOrCreateMetaData(prototype);\r\n        const extenders = getOrCreateExtenders(medaData, key);\r\n        extenders.push(extendersOrFactory);\r\n    }\r\n}\r\n\r\n/*===========================================================================*/\r\n\r\n/**\r\n * Like https://github.com/jayphelps/core-decorators.js @autobind but less smart and complex\r\n * Do NOT use with ES6 inheritance!\r\n */\r\nexport function autobind(prototype: Object, key: string | symbol, desc: PropertyDescriptor) {\r\n    const { value, configurable, enumerable } = desc || (desc = getDescriptor(prototype, key));\r\n    return {\r\n        configurable: configurable,\r\n        enumerable: enumerable,\r\n        get() {\r\n            if (this === prototype) {\r\n                return value;\r\n            }\r\n            const bound = value.bind(this);\r\n            defProp(this, key, {\r\n                configurable: true,\r\n                value: bound,\r\n            });\r\n            return bound;\r\n        }\r\n    } as PropertyDescriptor;\r\n}\r\n\r\n/*===========================================================================*/\r\n\r\n/**\r\n * Subscribe callback to dependency changes\r\n */\r\nexport function subscribe<T>(\r\n    getDependency: () => T, \r\n    callback: (value: T) => void,\r\n    options?: { once?: boolean, event?: string }\r\n): KnockoutSubscription {\r\n    const once = options && options.once || false;\r\n    const event = options && options.event || \"change\";\r\n\r\n    const dependency = ko.computed(getDependency);\r\n    \r\n    const subscription = dependency.subscribe(callback, null, event);\r\n    \r\n    const originalDispose = subscription.dispose;\r\n    // dispose hidden computed with subscription\r\n    subscription.dispose = function () {\r\n        originalDispose.call(this);\r\n        dependency.dispose();\r\n    };\r\n\r\n    if (once) {\r\n        dependency.subscribe(() => {\r\n            subscription.dispose();\r\n        });\r\n    }\r\n    return subscription;\r\n}\r\n\r\n/*===========================================================================*/\r\n\r\n/**\r\n * Get internal ko.observable() for object property decodated by @observable\r\n */\r\nexport function unwrap(instance: Object, key: string | symbol): any;\r\nexport function unwrap<T>(instance: Object, key: string | symbol): KnockoutObservable<T>;\r\n\r\n/**\r\n * Get internal ko.observable() for object property decodated by @observable\r\n */\r\nexport function unwrap(instance: Object, key: string | symbol) {\r\n    if (!hasOwnProperty(instance, key)) {\r\n        // invoke getter on instance.__proto__ that defines property on instance\r\n        instance[key];\r\n    }\r\n    return getDescriptor(instance, key).get;\r\n}"],"names":["ko.utils","ko.components","observable","ko.observable","computed","ko.pureComputed","ko.observableArray","ko.computed"],"mappings":"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"}