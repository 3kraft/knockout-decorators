{"version":3,"file":"knockout-decorators.js","sources":["../src/common-functions.ts","../src/event-property.ts","../src/property-extenders.ts","../src/observable-property.ts","../src/observable-array.ts","../src/knockout-decorators.ts"],"sourcesContent":["/**\r\n * Copyright (c) 2016-2017 Dmitry Panyushkin\r\n * Available under MIT license\r\n */\r\nimport * as ko from \"knockout\";\r\n\r\nconst prefix = \"__ko_decorators_\";\r\n\r\nexport let PATCHED_KEY: string | symbol = prefix + \"patched__\";\r\nexport let EXTENDERS_KEY: string | symbol = prefix + \"extenders__\";\r\nexport let SUBSCRIPTIONS_KEY: string | symbol = prefix + \"subscriptions__\";\r\n\r\nif (typeof Symbol !== \"undefined\") {\r\n    PATCHED_KEY = Symbol(PATCHED_KEY);\r\n    EXTENDERS_KEY = Symbol(EXTENDERS_KEY);\r\n    SUBSCRIPTIONS_KEY = Symbol(SUBSCRIPTIONS_KEY);\r\n}\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const ArrayPrototype = Array.prototype;\r\n\r\nexport function defineProperty(instance: Object, key: any, descriptor: PropertyDescriptor) {\r\n    descriptor.configurable = true;\r\n    Object.defineProperty(instance, key, descriptor);\r\n}\r\n\r\nexport const extendObject = ko.utils.extend;\r\nexport const objectForEach = ko.utils.objectForEach;\r\nexport const isArray = Array.isArray.bind(Array);\r\nexport const getPrototypeOf = Object.getPrototypeOf.bind(Object);\r\nexport const getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor.bind(Object);\r\nexport const hasOwnProperty = Function.prototype.call.bind(Object.prototype.hasOwnProperty);\r\nexport const arraySlice = Function.prototype.call.bind(ArrayPrototype.slice);\r\n","/**\r\n * Copyright (c) 2016-2017 Dmitry Panyushkin\r\n * Available under MIT license\r\n */\r\nimport * as ko from \"knockout\";\r\nimport { arraySlice, defineProperty } from \"./common-functions\";\r\nimport { EventType } from \"./knockout-decorators\";\r\n\r\nexport function defineEventProperty(instance: Object, key: string | symbol) {\r\n    const subscribable = new ko.subscribable<any[]>();\r\n\r\n    const event: EventType = function () {\r\n        const eventArgs = arraySlice(arguments);\r\n        subscribable.notifySubscribers(eventArgs);\r\n    } as any;\r\n\r\n    event.subscribe = function (callback: Function) {\r\n        return subscribable.subscribe(function (eventArgs: any[]) {\r\n            callback.apply(null, eventArgs);\r\n        });\r\n    };\r\n\r\n    defineProperty(instance, key, {\r\n        value: event,\r\n    });\r\n\r\n    return event;\r\n}\r\n","/**\r\n * Copyright (c) 2016-2017 Dmitry Panyushkin\r\n * Available under MIT license\r\n */\r\nimport { EXTENDERS_KEY, extendObject, hasOwnProperty, objectForEach } from \"./common-functions\";\r\n\r\ntype Extender = Object | Function;\r\n\r\ninterface ExtendersDictionary {\r\n    [propName: string]: Extender[];\r\n}\r\n\r\nexport function applyExtenders(\r\n    instance: Object, key: string | symbol,\r\n    target: KnockoutObservable<any> | KnockoutComputed<any>,\r\n) {\r\n    const dictionary = instance[EXTENDERS_KEY] as ExtendersDictionary;\r\n    const extenders = dictionary && dictionary[key];\r\n    if (extenders) {\r\n        extenders.forEach((extender) => {\r\n            const koExtender = extender instanceof Function\r\n                ? extender.call(instance) : extender;\r\n\r\n            target = target.extend(koExtender);\r\n        });\r\n    }\r\n    return target;\r\n}\r\n\r\nexport function defineExtenders(\r\n    prototype: Object, key: string | symbol,\r\n    extendersOrFactory: Object | Function,\r\n) {\r\n    let dictionary = prototype[EXTENDERS_KEY] as ExtendersDictionary;\r\n    // if there is no ExtendersDictionary or ExtendersDictionary lives in base class prototype\r\n    if (!hasOwnProperty(prototype, EXTENDERS_KEY)) {\r\n        // clone ExtendersDictionary from base class prototype or create new ExtendersDictionary\r\n        prototype[EXTENDERS_KEY] = dictionary = extendObject({}, dictionary) as ExtendersDictionary;\r\n        // clone Extenders arrays for each property key\r\n        objectForEach(dictionary, (existingKey, extenders) => {\r\n            dictionary[existingKey] = [...extenders];\r\n        });\r\n    }\r\n    // get existing Extenders array or create new array\r\n    const extenders = dictionary[key] || (dictionary[key] = []);\r\n    // add new Extenders\r\n    extenders.push(extendersOrFactory);\r\n}\r\n","/**\r\n * Copyright (c) 2016-2017 Dmitry Panyushkin\r\n * Available under MIT license\r\n */\r\nimport * as ko from \"knockout\";\r\nimport {\r\n    defineProperty, getPrototypeOf, hasOwnProperty, isArray, objectForEach, PATCHED_KEY,\r\n} from \"./common-functions\";\r\nimport { defineObservableArray } from \"./observable-array\";\r\nimport { applyExtenders } from \"./property-extenders\";\r\n\r\nexport function defineObservableProperty(\r\n    instance: Object, key: string | symbol, value: any, deep: boolean,\r\n) {\r\n    const observable = applyExtenders(instance, key, ko.observable());\r\n\r\n    let setter = observable as any;\r\n\r\n    if (deep) {\r\n        setter = function (newValue: any) {\r\n            observable(prepareDeepValue(newValue));\r\n        };\r\n    }\r\n\r\n    defineProperty(instance, key, {\r\n        enumerable: true,\r\n        get: observable,\r\n        set: setter,\r\n    });\r\n\r\n    setter(value);\r\n}\r\n\r\nexport function prepareDeepValue(value: any) {\r\n    if (typeof value === \"object\") {\r\n        if (isArray(value) || value === null) {\r\n            // value is Array or null\r\n            return value;\r\n        } else if (hasOwnProperty(value, \"constructor\")) {\r\n            // there is redefined own property \"constructor\"\r\n            const prototype = getPrototypeOf(value);\r\n            if (prototype === Object.prototype || prototype === null) {\r\n                // value is plain Object\r\n                return prepareDeepObject(value);\r\n            }\r\n        } else if (value.constructor === Object) {\r\n            // value is plain Object\r\n            return prepareDeepObject(value);\r\n        }\r\n    }\r\n    // value is primitive, function or class instance\r\n    return value;\r\n}\r\n\r\nexport function prepareDeepObject(instance: Object) {\r\n    if (!hasOwnProperty(instance, PATCHED_KEY)) {\r\n        // mark instance as ObservableObject\r\n        defineProperty(instance, PATCHED_KEY, {\r\n            value: true,\r\n        });\r\n        // define deep observable properties\r\n        objectForEach(instance, (key, value) => {\r\n            if (isArray(value)) {\r\n                defineObservableArray(instance, key, value, true);\r\n            } else {\r\n                defineObservableProperty(instance, key, value, true);\r\n            }\r\n        });\r\n    }\r\n    return instance;\r\n}\r\n","/**\r\n * Copyright (c) 2016-2017 Dmitry Panyushkin\r\n * Available under MIT license\r\n */\r\nimport * as ko from \"knockout\";\r\nimport { ArrayPrototype, arraySlice, defineProperty, hasOwnProperty, isArray, PATCHED_KEY } from \"./common-functions\";\r\nimport { prepareDeepValue } from \"./observable-property\";\r\nimport { applyExtenders } from \"./property-extenders\";\r\n\r\ntype ObsArray = KnockoutObservableArray<any> & { [fnName: string]: Function };\r\n\r\nconst deepArrayMethods = [\"pop\", \"reverse\", \"shift\", \"sort\"];\r\nconst allArrayMethods = [...deepArrayMethods, \"push\", \"splice\", \"unshift\"];\r\n\r\nconst deepObservableArrayMethods = [\"remove\", \"removeAll\", \"destroy\", \"destroyAll\", \"replace\", \"subscribe\"];\r\nconst allObservableArrayMethods = [...deepObservableArrayMethods, \"replace\"];\r\n\r\nconst allMethods = [...allArrayMethods, ...allObservableArrayMethods, \"mutate\", \"set\"];\r\n\r\nexport function defineObservableArray(\r\n    instance: Object, key: string | symbol, value: any[], deep: boolean,\r\n) {\r\n    const obsArray = applyExtenders(instance, key, ko.observableArray()) as ObsArray;\r\n\r\n    let insideObsArray = false;\r\n\r\n    defineProperty(instance, key, {\r\n        enumerable: true,\r\n        get: obsArray,\r\n        set: setter,\r\n    });\r\n\r\n    setter(value);\r\n\r\n    function setter(newValue: any[]) {\r\n        const lastValue = obsArray.peek();\r\n        // if we got new value\r\n        if (lastValue !== newValue) {\r\n            if (isArray(lastValue)) {\r\n                // if lastValue array methods were already patched\r\n                if (hasOwnProperty(lastValue, PATCHED_KEY)) {\r\n                    delete lastValue[PATCHED_KEY];\r\n                    // clear patched array methods on lastValue (see unit tests)\r\n                    allMethods.forEach((fnName) => {\r\n                        delete lastValue[fnName];\r\n                    });\r\n                }\r\n            }\r\n            if (isArray(newValue)) {\r\n                // if new value array methods were already connected with another @observable\r\n                if (hasOwnProperty(newValue, PATCHED_KEY)) {\r\n                    // clone new value to prevent corruption of another @observable (see unit tests)\r\n                    newValue = [...newValue];\r\n                }\r\n                // if deep option is set\r\n                if (deep) {\r\n                    // make all array items deep observable\r\n                    for (let i = 0; i < newValue.length; ++i) {\r\n                        newValue[i] = prepareDeepValue(newValue[i]);\r\n                    }\r\n                }\r\n                // mark instance as ObservableArray\r\n                defineProperty(newValue, PATCHED_KEY, {\r\n                    value: true,\r\n                });\r\n                // call ko.observableArray.fn[fnName] instead of Array.prototype[fnName]\r\n                patchArrayMethods(newValue);\r\n            }\r\n        }\r\n        // update obsArray contents\r\n        insideObsArray = true;\r\n        obsArray(newValue);\r\n        insideObsArray = false;\r\n    }\r\n\r\n    function patchArrayMethods(array: any[]) {\r\n        const arrayMethods = deep ? deepArrayMethods : allArrayMethods;\r\n\r\n        arrayMethods.forEach((fnName) => defineProperty(array, fnName, {\r\n            value() {\r\n                if (insideObsArray) {\r\n                    return ArrayPrototype[fnName].apply(array, arguments);\r\n                }\r\n                insideObsArray = true;\r\n                const result = obsArray[fnName].apply(obsArray, arguments);\r\n                insideObsArray = false;\r\n                return result;\r\n            },\r\n        }));\r\n\r\n        const observableArrayMethods = deep ? deepObservableArrayMethods : allObservableArrayMethods;\r\n\r\n        observableArrayMethods.forEach((fnName) => defineProperty(array, fnName, {\r\n            value() {\r\n                insideObsArray = true;\r\n                const result = obsArray[fnName].apply(obsArray, arguments);\r\n                insideObsArray = false;\r\n                return result;\r\n            },\r\n        }));\r\n\r\n        if (deep) {\r\n            defineProperty(array, \"push\", {\r\n                value() {\r\n                    if (insideObsArray) {\r\n                        return ArrayPrototype.push.apply(array, arguments);\r\n                    }\r\n                    const args = arraySlice(arguments);\r\n                    for (let i = 0; i < args.length; ++i) {\r\n                        args[i] = prepareDeepValue(args[i]);\r\n                    }\r\n                    insideObsArray = true;\r\n                    const result = obsArray.push.apply(obsArray, args);\r\n                    insideObsArray = false;\r\n                    return result;\r\n                },\r\n            });\r\n\r\n            defineProperty(array, \"unshift\", {\r\n                value() {\r\n                    if (insideObsArray) {\r\n                        return ArrayPrototype.unshift.apply(array, arguments);\r\n                    }\r\n                    const args = arraySlice(arguments);\r\n                    for (let i = 0; i < args.length; ++i) {\r\n                        args[i] = prepareDeepValue(args[i]);\r\n                    }\r\n                    insideObsArray = true;\r\n                    const result = obsArray.unshift.apply(obsArray, args);\r\n                    insideObsArray = false;\r\n                    return result;\r\n                },\r\n            });\r\n\r\n            defineProperty(array, \"splice\", {\r\n                value() {\r\n                    if (insideObsArray) {\r\n                        return ArrayPrototype.splice.apply(array, arguments);\r\n                    }\r\n\r\n                    let result: any[];\r\n\r\n                    insideObsArray = true;\r\n                    switch (arguments.length) {\r\n                        case 0:\r\n                        case 1:\r\n                        case 2: {\r\n                            result = obsArray.splice.apply(obsArray, arguments);\r\n                            break;\r\n                        }\r\n                        case 3: {\r\n                            result = obsArray.splice(\r\n                                arguments[0], arguments[1], prepareDeepValue(arguments[2]),\r\n                            );\r\n                            break;\r\n                        }\r\n                        default: {\r\n                            const args = arraySlice(arguments);\r\n                            for (let i = 2; i < args.length; ++i) {\r\n                                args[i] = prepareDeepValue(args[i]);\r\n                            }\r\n                            result = obsArray.splice.apply(obsArray, arguments);\r\n                            break;\r\n                        }\r\n                    }\r\n                    insideObsArray = false;\r\n\r\n                    return result;\r\n                },\r\n            });\r\n\r\n            defineProperty(array, \"replace\", {\r\n                value(oldItem: any, newItem: any) {\r\n                    insideObsArray = true;\r\n                    const result = obsArray.replace(oldItem, prepareDeepValue(newItem));\r\n                    insideObsArray = false;\r\n                    return result;\r\n                },\r\n            });\r\n\r\n            defineProperty(array, \"mutate\", {\r\n                value(mutator: (array?: any[]) => void) {\r\n                    const nativeArray = obsArray.peek();\r\n                    // it is defined for ko.observableArray\r\n                    (obsArray.valueWillMutate as Function)();\r\n                    mutator(nativeArray);\r\n                    for (let i = 0; i < nativeArray.length; ++i) {\r\n                        nativeArray[i] = prepareDeepValue(nativeArray[i]);\r\n                    }\r\n                    // it is defined for ko.observableArray\r\n                    (obsArray.valueHasMutated as Function)();\r\n                },\r\n            });\r\n\r\n            defineProperty(array, \"set\", {\r\n                value(index: number, newItem: any) {\r\n                    return obsArray.splice(index, 1, prepareDeepValue(newItem))[0];\r\n                },\r\n            });\r\n        } else {\r\n            defineProperty(array, \"mutate\", {\r\n                value(mutator: (array?: any[]) => void) {\r\n                    // it is defined for ko.observableArray\r\n                    (obsArray.valueWillMutate as Function)();\r\n                    mutator(obsArray.peek());\r\n                    // it is defined for ko.observableArray\r\n                    (obsArray.valueHasMutated as Function)();\r\n                },\r\n            });\r\n\r\n            defineProperty(array, \"set\", {\r\n                value(index: number, newItem: any) {\r\n                    return obsArray.splice(index, 1, newItem)[0];\r\n                },\r\n            });\r\n        }\r\n    }\r\n}\r\n","/**\r\n * Copyright (c) 2016-2017 Dmitry Panyushkin\r\n * Available under MIT license\r\n * Version: 1.0.1\r\n */\r\nimport * as ko from \"knockout\";\r\nimport {\r\n    defineProperty, extendObject, getOwnPropertyDescriptor, hasOwnProperty, isArray, PATCHED_KEY, SUBSCRIPTIONS_KEY,\r\n} from \"./common-functions\";\r\nimport { defineEventProperty } from \"./event-property\";\r\nimport { defineObservableArray } from \"./observable-array\";\r\nimport { defineObservableProperty } from \"./observable-property\";\r\nimport { applyExtenders, defineExtenders } from \"./property-extenders\";\r\n\r\n/**\r\n * Property decorator that creates hidden (shallow or deep) ko.observable with ES6 getter and setter for it\r\n * If initialized by Array then hidden ko.observableArray will be created\r\n */\r\nexport function observable(options: { deep: boolean }): PropertyDecorator;\r\n/**\r\n * Property decorator that creates hidden (shallow) ko.observable with ES6 getter and setter for it\r\n * If initialized by Array then hidden (shallow) ko.observableArray will be created\r\n */\r\nexport function observable(prototype: Object, key: string | symbol): void;\r\n/**\r\n * Property decorator that creates hidden (shallow or deep) ko.observable with ES6 getter and setter for it\r\n * If initialized by Array then hidden (shallow or deep) ko.observableArray will be created\r\n */\r\nexport function observable(prototypeOrOptions: any, key?: any) {\r\n    observableArrayOption = false;\r\n    deepObservableOption = false;\r\n    if (arguments.length === 1) {\r\n        deepObservableOption = prototypeOrOptions.deep;\r\n        return observableDecorator;\r\n    }\r\n    return observableDecorator(prototypeOrOptions, key);\r\n}\r\n\r\n/**\r\n * Property decorator that creates hidden (shallow or deep) ko.observableArray with ES6 getter and setter for it\r\n */\r\nexport function observableArray(options: { deep: boolean }): PropertyDecorator;\r\n/**\r\n * Property decorator that creates hidden (shallow) ko.observableArray with ES6 getter and setter for it\r\n */\r\nexport function observableArray(prototype: Object, key: string | symbol): void;\r\n/**\r\n * Property decorator that creates hidden (shallow or deep) ko.observableArray with ES6 getter and setter for it\r\n */\r\nexport function observableArray(prototypeOrOptions: any, key?: any) {\r\n    observableArrayOption = true;\r\n    deepObservableOption = false;\r\n    if (arguments.length === 1) {\r\n        deepObservableOption = prototypeOrOptions.deep;\r\n        return observableDecorator;\r\n    }\r\n    return observableDecorator(prototypeOrOptions, key);\r\n}\r\n\r\n// observableDecorator options\r\nlet observableArrayOption: boolean;\r\nlet deepObservableOption: boolean;\r\n\r\nfunction observableDecorator(prototype: Object, propKey: string | symbol) {\r\n    const array = observableArrayOption;\r\n    const deep = deepObservableOption;\r\n    defineProperty(prototype, propKey, {\r\n        get() {\r\n            throw new Error(\"@observable property '\" + propKey.toString() + \"' was not initialized\");\r\n        },\r\n        set(this: Object, value: any) {\r\n            if (array || isArray(value)) {\r\n                defineObservableArray(this, propKey, value, deep);\r\n            } else {\r\n                defineObservableProperty(this, propKey, value, deep);\r\n            }\r\n        },\r\n    });\r\n}\r\n\r\nexport interface ObservableArray<T> extends Array<T> {\r\n    replace(oldItem: T, newItem: T): void;\r\n\r\n    remove(item: T): T[];\r\n    remove(removeFunction: (item: T) => boolean): T[];\r\n\r\n    removeAll(): T[];\r\n    removeAll(items: T[]): T[];\r\n\r\n    destroy(item: T): void;\r\n    destroy(destroyFunction: (item: T) => boolean): void;\r\n\r\n    destroyAll(): void;\r\n    destroyAll(items: T[]): void;\r\n\r\n    subscribe(callback: (val: T[]) => void): KnockoutSubscription;\r\n    subscribe(callback: (val: T[]) => void, callbackTarget: any): KnockoutSubscription;\r\n    subscribe(callback: (val: any[]) => void, callbackTarget: any, event: string): KnockoutSubscription;\r\n\r\n    /**\r\n     * Run mutator function that can write to array at some index (`array[index] = value;`)\r\n     * Then notify about observableArray changes\r\n     */\r\n    mutate(mutator: (arrayValue: T[]) => void): void;\r\n\r\n    /**\r\n     * Replace value at some index and return old value\r\n     */\r\n    set(index: number, value: T): T;\r\n}\r\n\r\n/*---------------------------------------------------------------------------*/\r\n\r\n/**\r\n * Accessor decorator that wraps ES6 getter to hidden ko.computed or ko.pureComputed\r\n *\r\n * Setter is not wrapped to hidden ko.pureComputed and stays unchanged\r\n *\r\n * But we can still extend getter @computed by extenders like { rateLimit: 500 }\r\n */\r\nexport function computed(options: { pure: boolean }): PropertyDecorator;\r\n/**\r\n * Accessor decorator that wraps ES6 getter to hidden ko.pureComputed\r\n *\r\n * Setter is not wrapped to hidden ko.pureComputed and stays unchanged\r\n *\r\n * But we can still extend getter @computed by extenders like { rateLimit: 500 }\r\n */\r\nexport function computed(prototype: Object, key: string | symbol, desc: PropertyDescriptor): PropertyDescriptor;\r\n/**\r\n * Accessor decorator that wraps ES6 getter to hidden ko.computed or ko.pureComputed\r\n *\r\n * Setter is not wrapped to hidden ko.pureComputed and stays unchanged\r\n *\r\n * But we can still extend getter @computed by extenders like { rateLimit: 500 }\r\n */\r\nexport function computed(prototypeOrOptinos: any, key?: any, propDesc?: any): any {\r\n    computedDecoratorOptions = { pure: true };\r\n\r\n    if (arguments.length === 1) {\r\n        computedDecoratorOptions = prototypeOrOptinos;\r\n        return computedDecorator;\r\n    }\r\n    return computedDecorator(prototypeOrOptinos, key, propDesc);\r\n}\r\n\r\n// computedDecorator options\r\nlet computedDecoratorOptions: { pure: boolean };\r\n\r\nfunction computedDecorator(prototype: Object, propKey: string | symbol, desc: PropertyDescriptor) {\r\n    const options = computedDecoratorOptions;\r\n    const { get, set } = desc || (desc = getOwnPropertyDescriptor(prototype, propKey));\r\n    if (!get) {\r\n        throw new Error(\"@computed property '\" + propKey.toString() + \"' has no getter\");\r\n    }\r\n    desc.get = function (this: Object) {\r\n        const computed = applyExtenders(this, propKey, ko.computed(get, this, options));\r\n        defineProperty(this, propKey, {\r\n            get: computed,\r\n            // tslint:disable-next-line:object-literal-shorthand\r\n            set: set,\r\n        });\r\n        return computed();\r\n    };\r\n    return desc;\r\n}\r\n\r\n/*---------------------------------------------------------------------------*/\r\n\r\n/**\r\n * Apply extenders to decorated @observable\r\n */\r\nexport function extend(extenders: Object): PropertyDecorator;\r\n/**\r\n * Apply extenders to decorated @observable\r\n */\r\nexport function extend(extendersFactory: () => Object): PropertyDecorator;\r\n/**\r\n * Apply extenders to decorated @observable\r\n * @extendersOrFactory { Object | Function } Knockout extenders definition or factory that produces definition\r\n */\r\nexport function extend(extendersOrFactory: Object | Function) {\r\n    return function (prototype: Object, key: string | symbol) {\r\n        defineExtenders(prototype, key, extendersOrFactory);\r\n    };\r\n}\r\n\r\n/*---------------------------------------------------------------------------*/\r\n\r\nexport type ComponentConstructor = new (\r\n    params?: any,\r\n    element?: Node,\r\n    templateNodes?: Node[],\r\n) => any;\r\n\r\nexport type ComponentDecorator = (constructor: ComponentConstructor) => void;\r\n\r\nexport type TemplateConfig = (\r\n    string\r\n    | Node[]\r\n    | DocumentFragment\r\n    | { require: string }\r\n    | { element: string | Node }\r\n);\r\n\r\n/**\r\n * Register Knockout component by decorating ViewModel class\r\n */\r\nexport function component(\r\n    name: string,\r\n    options?: Object,\r\n): ComponentDecorator;\r\n/**\r\n * Register Knockout component by decorating ViewModel class\r\n */\r\nexport function component(\r\n    name: string,\r\n    template: TemplateConfig,\r\n    options?: Object,\r\n): ComponentDecorator;\r\n/**\r\n * Register Knockout component by decorating ViewModel class\r\n */\r\nexport function component(\r\n    name: string,\r\n    template: TemplateConfig,\r\n    styles: string | string[],\r\n    options?: Object,\r\n): ComponentDecorator;\r\n/**\r\n * Register Knockout component by decorating ViewModel class\r\n * @param name {String} Name of component\r\n * @param template {Any} Knockout template definition\r\n * @param styles {Any} Ignored parameter (used for `require()` styles by webpack etc.)\r\n * @param options {Object} Another options that passed directly to `ko.components.register()`\r\n */\r\nexport function component(\r\n    name: string,\r\n    template?: any,\r\n    styles?: any,\r\n    options?: Object,\r\n) {\r\n    if (options === void 0) {\r\n        if (styles === void 0) {\r\n            if (typeof template === \"object\"\r\n                && template.constructor === Object\r\n                && !(\"require\" in template)\r\n                && !(\"element\" in template)\r\n            ) {\r\n                options = template;\r\n                template = void 0;\r\n            }\r\n        } else if (typeof styles === \"object\") {\r\n            options = styles;\r\n            styles = void 0;\r\n        }\r\n    }\r\n\r\n    return function (constructor: ComponentConstructor) {\r\n        ko.components.register(name, extendObject({\r\n            viewModel: constructor.length < 2 ? constructor : {\r\n                createViewModel(params: any, {\r\n                    element, templateNodes,\r\n                }: {\r\n                        element: Node, templateNodes: Node[],\r\n                    }) {\r\n                    return new constructor(params, element, templateNodes);\r\n                },\r\n            },\r\n            template: template || \"<!---->\",\r\n            synchronous: true,\r\n        }, options as Object));\r\n    };\r\n}\r\n\r\n/*---------------------------------------------------------------------------*/\r\n\r\n/**\r\n * Like https://github.com/jayphelps/core-decorators.js @autobind but less smart and complex\r\n * Do NOT use with ES6 inheritance!\r\n */\r\nexport function autobind(prototype: Object, key: string | symbol, desc: PropertyDescriptor) {\r\n    const { value, configurable, enumerable } = desc || (desc = getOwnPropertyDescriptor(prototype, key));\r\n    return {\r\n        // tslint:disable-next-line:object-literal-shorthand\r\n        configurable: configurable,\r\n        // tslint:disable-next-line:object-literal-shorthand\r\n        enumerable: enumerable,\r\n        get(this: Object) {\r\n            if (this === prototype) {\r\n                return value;\r\n            }\r\n            const bound = value.bind(this);\r\n            defineProperty(this, key, {\r\n                value: bound,\r\n            });\r\n            return bound;\r\n        },\r\n    } as PropertyDescriptor;\r\n}\r\n\r\n/*---------------------------------------------------------------------------*/\r\n\r\n/**\r\n * Define hidden ko.subscribable, that notifies subscribers when decorated method is invoked\r\n */\r\nexport function event(prototype: Object, key: string | symbol) {\r\n    defineProperty(prototype, key, {\r\n        get(this: Object) {\r\n            return defineEventProperty(this, key);\r\n        },\r\n    });\r\n}\r\n\r\nexport type EventType = Function & {\r\n    subscribe(callback: Function): KnockoutSubscription;\r\n};\r\n\r\n/*---------------------------------------------------------------------------*/\r\n\r\n/**\r\n * Subscribe callback to `@observable` or `@computed` dependency changes or to some `@event` property\r\n */\r\nexport function subscribe<T>(\r\n    dependencyOrEvent: () => T,\r\n    callback: (value: T) => void,\r\n    options?: { once?: boolean, event?: \"change\" | \"beforeChange\" },\r\n): KnockoutSubscription;\r\n/**\r\n * Subscribe callback to `@observableArray` dependency \"arrayChange\" event\r\n */\r\nexport function subscribe<T>(\r\n    dependency: () => T[],\r\n    callback: (value: {\r\n        status: \"added\" | \"deleted\";\r\n        value: T;\r\n        index: number;\r\n    }[]) => void,\r\n    options: { once?: boolean, event: \"arrayChange\" },\r\n): KnockoutSubscription;\r\n/**\r\n * Subscribe callback to some `@event` property\r\n */\r\nexport function subscribe<T>(\r\n    event: (arg: T) => void,\r\n    callback: (arg: T) => void,\r\n    options?: { once?: boolean },\r\n): KnockoutSubscription;\r\n/**\r\n * Subscribe callback to some `@event` property\r\n */\r\nexport function subscribe<T1, T2>(\r\n    event: (arg1: T1, arg2: T2) => void,\r\n    callback: (arg1: T1, arg2: T2) => void,\r\n    options?: { once?: boolean },\r\n): KnockoutSubscription;\r\n/**\r\n * Subscribe callback to some `@event` property\r\n */\r\nexport function subscribe<T1, T2, T3>(\r\n    event: (arg1: T1, arg2: T2, arg3: T3, ...args: any[]) => void,\r\n    callback: (arg1: T1, arg2: T2, arg3: T3, ...args: any[]) => void,\r\n    options?: { once?: boolean },\r\n): KnockoutSubscription;\r\n/**\r\n * Subscribe callback to `@observable` or `@computed` dependency changes or to some `@event`\r\n */\r\nexport function subscribe(\r\n    dependencyOrEvent: Function,\r\n    callback: (...args: any[]) => void,\r\n    options?: { once?: boolean, event?: \"change\" | \"beforeChange\" | \"arrayChange\" },\r\n) {\r\n    const once = options && options.once || false;\r\n\r\n    if (hasOwnProperty(dependencyOrEvent, \"subscribe\")) {\r\n        // overload: subscribe to @event property\r\n        const event = dependencyOrEvent as EventType;\r\n\r\n        if (once) {\r\n            const subscription = event.subscribe(function () {\r\n                subscription.dispose();\r\n                callback.apply(null, arguments);\r\n            });\r\n            return subscription;\r\n        } else {\r\n            return event.subscribe(callback);\r\n        }\r\n    } else {\r\n        // overload: subscribe to @observable or @computed\r\n        const event = options && options.event || \"change\";\r\n\r\n        let handler: (value: any) => void;\r\n        let subscription: KnockoutSubscription;\r\n\r\n        if (once) {\r\n            handler = function () {\r\n                subscription.dispose();\r\n                callback.apply(null, arguments);\r\n            };\r\n        } else {\r\n            handler = callback;\r\n        }\r\n\r\n        if (event === \"arrayChange\") {\r\n            const obsArray = dependencyOrEvent() as ObservableArray<any>;\r\n\r\n            if (isArray(obsArray) && hasOwnProperty(obsArray, PATCHED_KEY)) {\r\n                subscription = obsArray.subscribe(handler, null, event);\r\n            } else {\r\n                throw new Error(\"Can not subscribe to 'arrayChange' because dependency is not an 'observableArray'\");\r\n            }\r\n        } else {\r\n            const computed = ko.computed(dependencyOrEvent as () => any);\r\n\r\n            subscription = computed.subscribe(handler, null, event);\r\n\r\n            const originalDispose = subscription.dispose;\r\n            // dispose hidden computed with subscription\r\n            subscription.dispose = function (this: KnockoutSubscription) {\r\n                originalDispose.call(this);\r\n                computed.dispose();\r\n            };\r\n        }\r\n        return subscription;\r\n    }\r\n}\r\n\r\n/*---------------------------------------------------------------------------*/\r\n\r\n/**\r\n * Get internal ko.observable() for object property decodated by @observable\r\n */\r\nexport function unwrap(instance: Object, key: string | symbol): any;\r\n/**\r\n * Get internal ko.observable() for object property decodated by @observable\r\n */\r\nexport function unwrap<T>(instance: Object, key: string | symbol): KnockoutObservable<T>;\r\n/**\r\n * Get internal ko.observable() for object property decodated by @observable\r\n */\r\nexport function unwrap(instance: Object, key: string | symbol) {\r\n    if (!hasOwnProperty(instance, key)) {\r\n        // invoke getter on instance.__proto__ that defines property on instance\r\n        // tslint:disable-next-line:no-unused-expression\r\n        instance[key];\r\n    }\r\n    return getOwnPropertyDescriptor(instance, key).get;\r\n}\r\n\r\n/*---------------------------------------------------------------------------*/\r\n/**\r\n * Mixin which add `subscribe()` instance method and implement `dispose()` method,\r\n * that disposes all subscription created by `subscribe()`\r\n */\r\nexport interface Disposable {\r\n    /** Dispose all subscriptions from this class */\r\n    dispose(): void;\r\n\r\n    /** Subscribe callback to `@observable` or `@computed` dependency changes or to some `@event` property */\r\n    subscribe<T>(\r\n        dependencyOrEvent: () => T,\r\n        callback: (value: T) => void,\r\n        options?: { once?: boolean, event?: \"change\" | \"beforeChange\" },\r\n    ): KnockoutSubscription;\r\n    /** Subscribe callback to `@observableArray` dependency \"arrayChange\" event */\r\n    subscribe<T>(\r\n        dependency: () => T[],\r\n        callback: (value: {\r\n            status: \"added\" | \"deleted\";\r\n            value: T;\r\n            index: number;\r\n        }[]) => void,\r\n        options: { once?: boolean, event: \"arrayChange\" },\r\n    ): KnockoutSubscription;\r\n    /** Subscribe callback to some `@event` property */\r\n    subscribe<T>(\r\n        event: (arg: T) => void,\r\n        callback: (arg: T) => void,\r\n        options?: { once?: boolean },\r\n    ): KnockoutSubscription;\r\n    /** Subscribe callback to some `@event` property */\r\n    subscribe<T1, T2>(\r\n        event: (arg1: T1, arg2: T2) => void,\r\n        callback: (arg1: T1, arg2: T2) => void,\r\n        options?: { once?: boolean },\r\n    ): KnockoutSubscription;\r\n    /** Subscribe callback to some `@event` property */\r\n    subscribe<T1, T2, T3>(\r\n        event: (arg1: T1, arg2: T2, arg3: T3, ...args: any[]) => void,\r\n        callback: (arg1: T1, arg2: T2, arg3: T3, ...args: any[]) => void,\r\n        options?: { once?: boolean },\r\n    ): KnockoutSubscription;\r\n\r\n    /** Get internal ko.observable() for class property decodated by `@observable` */\r\n    unwrap(key: string | symbol): any;\r\n    /** Get internal ko.observable() for class property decodated by `@observable` */\r\n    unwrap<T>(key: string | symbol): KnockoutObservable<T>;\r\n}\r\n\r\n/**\r\n * Mixin which add `subscribe()` instance method and implement `dispose()` method,\r\n * that disposes all subscription created by `subscribe()`\r\n */\r\nexport function Disposable(): new () => Disposable;\r\n/**\r\n * Mixin which add `subscribe()` instance method and implement `dispose()` method,\r\n * that disposes all subscription created by `subscribe()`\r\n * @param Base {Function} Base class to extend\r\n */\r\nexport function Disposable<T extends Function>(\r\n    // tslint:disable-next-line:variable-name\r\n    Base: T,\r\n): new (...args: any[]) => Disposable & T\r\n/**\r\n * Mixin which add `subscribe()` instance method and implement `dispose()` method,\r\n * that disposes all subscription created by `subscribe()`\r\n * @param Base {Function} Base class to extend\r\n */\r\nexport function Disposable<T extends new (...args: any[]) => any>(\r\n    // tslint:disable-next-line:variable-name\r\n    Base?: T,\r\n) {\r\n    if (typeof Base === \"undefined\") {\r\n        Base = class { } as T;\r\n    }\r\n    return class extends Base {\r\n        /** Dispose all subscriptions from this class */\r\n        dispose() {\r\n            const subscriptions: KnockoutSubscription[] = this[SUBSCRIPTIONS_KEY];\r\n            if (subscriptions) {\r\n                subscriptions.forEach((subscription) => {\r\n                    subscription.dispose();\r\n                });\r\n                delete this[SUBSCRIPTIONS_KEY];\r\n            }\r\n        }\r\n\r\n        /** Subscribe callback to `@observable` or `@computed` dependency changes or to some `@event` */\r\n        subscribe() {\r\n            const subscription: KnockoutSubscription = subscribe.apply(null, arguments);\r\n            const subscriptions: KnockoutSubscription[] = this[SUBSCRIPTIONS_KEY] || (this[SUBSCRIPTIONS_KEY] = []);\r\n            subscriptions.push(subscription);\r\n            return subscription;\r\n        }\r\n\r\n        /** Get internal ko.observable() for class property decodated by `@observable` */\r\n        unwrap(key: string) {\r\n            return unwrap(this, key);\r\n        }\r\n    };\r\n}\r\n"],"names":["ko.utils","ko.subscribable","ko.observable","ko.observableArray","ko.computed","ko.components","tslib_1.__extends"],"mappings":"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"}