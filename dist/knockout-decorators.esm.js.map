{"version":3,"file":"knockout-decorators.esm.js","sources":["../src/common-functions.ts","../src/event-property.ts","../src/property-extenders.ts","../src/observable-property.ts","../src/observable-array.ts","../src/knockout-decorators.ts"],"sourcesContent":["/**\n * Copyright (c) 2016-2017 Dmitry Panyushkin\n * Available under MIT license\n */\nimport * as ko from \"knockout\";\n\nconst prefix = \"__ko_decorators_\";\n\nexport let PATCHED_KEY: string | symbol = prefix + \"patched__\";\nexport let EXTENDERS_KEY: string | symbol = prefix + \"extenders__\";\nexport let SUBSCRIPTIONS_KEY: string | symbol = prefix + \"subscriptions__\";\n\nif (typeof Symbol !== \"undefined\") {\n  PATCHED_KEY = Symbol(PATCHED_KEY);\n  EXTENDERS_KEY = Symbol(EXTENDERS_KEY);\n  SUBSCRIPTIONS_KEY = Symbol(SUBSCRIPTIONS_KEY);\n}\n\n// tslint:disable-next-line:variable-name\nexport const ArrayPrototype = Array.prototype;\n\nexport function defineProperty(instance: Object, key: any, descriptor: PropertyDescriptor) {\n  descriptor.configurable = true;\n  Object.defineProperty(instance, key, descriptor);\n}\n\nexport const extendObject = ko.utils.extend;\nexport const objectForEach = ko.utils.objectForEach;\nexport const isArray = Array.isArray.bind(Array);\nexport const getPrototypeOf = Object.getPrototypeOf.bind(Object);\nexport const getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor.bind(Object);\nexport const hasOwnProperty = Function.prototype.call.bind(Object.prototype.hasOwnProperty);\nexport const arraySlice = Function.prototype.call.bind(ArrayPrototype.slice);\n","/**\n * Copyright (c) 2016-2017 Dmitry Panyushkin\n * Available under MIT license\n */\nimport * as ko from \"knockout\";\nimport { arraySlice, defineProperty } from \"./common-functions\";\nimport { EventType } from \"./knockout-decorators\";\n\nexport function defineEventProperty(instance: Object, key: string | symbol) {\n  const subscribable = new ko.subscribable<any[]>();\n\n  const event: EventType = function () {\n    const eventArgs = arraySlice(arguments);\n    subscribable.notifySubscribers(eventArgs);\n  } as any;\n\n  event.subscribe = function (callback: Function) {\n    return subscribable.subscribe(function (eventArgs: any[]) {\n      callback.apply(null, eventArgs);\n    });\n  };\n\n  defineProperty(instance, key, {\n    value: event,\n  });\n\n  return event;\n}\n","/**\n * Copyright (c) 2016-2017 Dmitry Panyushkin\n * Available under MIT license\n */\nimport { EXTENDERS_KEY, extendObject, hasOwnProperty, objectForEach } from \"./common-functions\";\n\ntype Extender = Object | Function;\n\ninterface ExtendersDictionary {\n  [propName: string]: Extender[];\n}\n\nexport function applyExtenders(\n  instance: Object, key: string | symbol,\n  target: KnockoutObservable<any> | KnockoutComputed<any>,\n) {\n  const dictionary = instance[EXTENDERS_KEY] as ExtendersDictionary;\n  const extenders = dictionary && dictionary[key];\n  if (extenders) {\n    extenders.forEach((extender) => {\n      const koExtender = extender instanceof Function\n        ? extender.call(instance) : extender;\n\n      target = target.extend(koExtender);\n    });\n  }\n  return target;\n}\n\nexport function defineExtenders(\n  prototype: Object, key: string | symbol,\n  extendersOrFactory: Object | Function,\n) {\n  let dictionary = prototype[EXTENDERS_KEY] as ExtendersDictionary;\n  // if there is no ExtendersDictionary or ExtendersDictionary lives in base class prototype\n  if (!hasOwnProperty(prototype, EXTENDERS_KEY)) {\n    // clone ExtendersDictionary from base class prototype or create new ExtendersDictionary\n    prototype[EXTENDERS_KEY] = dictionary = extendObject({}, dictionary) as ExtendersDictionary;\n    // clone Extenders arrays for each property key\n    objectForEach(dictionary, (existingKey, extenders) => {\n      dictionary[existingKey] = [...extenders];\n    });\n  }\n  // get existing Extenders array or create new array\n  const currentExtenders = dictionary[key] || (dictionary[key] = []);\n  // add new Extenders\n  currentExtenders.push(extendersOrFactory);\n}\n","/**\n * Copyright (c) 2016-2017 Dmitry Panyushkin\n * Available under MIT license\n */\nimport * as ko from \"knockout\";\nimport {\n  defineProperty, getPrototypeOf, hasOwnProperty, isArray, objectForEach, PATCHED_KEY,\n} from \"./common-functions\";\nimport { defineObservableArray } from \"./observable-array\";\nimport { applyExtenders } from \"./property-extenders\";\n\nexport function defineObservableProperty(\n  instance: Object, key: string | symbol, value: any, deep: boolean,\n  hiddenObservable: boolean\n) {\n  const observable = applyExtenders(instance, key, ko.observable());\n\n  let setter = observable as any;\n\n  if (deep) {\n    setter = function (newValue: any) {\n      observable(prepareDeepValue(newValue, hiddenObservable));\n    };\n  }\n\n  defineProperty(instance, key, {\n    enumerable: true,\n    get: observable,\n    set: setter,\n  });\n  if (hiddenObservable) {\n    defineProperty(instance, \"_\" + key.toString(), {\n      enumerable: false,\n      value: observable\n    });\n  }\n\n\n  setter(value);\n}\n\nexport function prepareDeepValue(value: any, hiddenObservable: boolean) {\n  if (typeof value === \"object\") {\n    if (isArray(value) || value === null) {\n      // value is Array or null\n      return value;\n    } else if (hasOwnProperty(value, \"constructor\")) {\n      // there is redefined own property \"constructor\"\n      const prototype = getPrototypeOf(value);\n      if (prototype === Object.prototype || prototype === null) {\n        // value is plain Object\n        return prepareDeepObject(value, hiddenObservable);\n      }\n    } else if (value.constructor === Object) {\n      // value is plain Object\n      return prepareDeepObject(value, hiddenObservable);\n    }\n  }\n  // value is primitive, function or class instance\n  return value;\n}\n\nexport function prepareDeepObject(instance: Object, hiddenObservable: boolean) {\n  if (!hasOwnProperty(instance, PATCHED_KEY)) {\n    // mark instance as ObservableObject\n    defineProperty(instance, PATCHED_KEY, {\n      value: true,\n    });\n    // define deep observable properties\n    objectForEach(instance, (key, value) => {\n      if (isArray(value)) {\n        defineObservableArray(instance, key, value, true, hiddenObservable);\n      } else {\n        defineObservableProperty(instance, key, value, true, hiddenObservable);\n      }\n    });\n  }\n  return instance;\n}\n","/**\n * Copyright (c) 2016-2017 Dmitry Panyushkin\n * Available under MIT license\n */\nimport * as ko from \"knockout\";\nimport { ArrayPrototype, arraySlice, defineProperty, hasOwnProperty, isArray, PATCHED_KEY } from \"./common-functions\";\nimport { prepareDeepValue } from \"./observable-property\";\nimport { applyExtenders } from \"./property-extenders\";\n\ntype ObsArray = KnockoutObservableArray<any> & { [fnName: string]: Function };\n\nconst deepArrayMethods = [\"pop\", \"reverse\", \"shift\", \"sort\"];\nconst allArrayMethods = [...deepArrayMethods, \"push\", \"splice\", \"unshift\"];\n\nconst deepObservableArrayMethods = [\"remove\", \"removeAll\", \"destroy\", \"destroyAll\", \"replace\", \"subscribe\"];\nconst allObservableArrayMethods = [...deepObservableArrayMethods, \"replace\"];\n\nconst allMethods = [...allArrayMethods, ...allObservableArrayMethods, \"mutate\", \"set\"];\n\nexport function defineObservableArray(\n  instance: Object, key: string | symbol, value: any[], deep: boolean,\n  hiddenObservable: boolean\n) {\n  const obsArray = applyExtenders(instance, key, ko.observableArray()) as ObsArray;\n\n  let insideObsArray = false;\n\n  defineProperty(instance, key, {\n    enumerable: true,\n    get: obsArray,\n    set: setter,\n  });\n  if (hiddenObservable) {\n    defineProperty(instance, \"_\" + key.toString(), {\n      enumerable: false,\n      value: obsArray\n    });\n  }\n\n  setter(value);\n\n  function setter(newValue: any[]) {\n    const lastValue = obsArray.peek();\n    // if we got new value\n    if (lastValue !== newValue) {\n      if (isArray(lastValue)) {\n        // if lastValue array methods were already patched\n        if (hasOwnProperty(lastValue, PATCHED_KEY)) {\n          delete lastValue[PATCHED_KEY];\n          // clear patched array methods on lastValue (see unit tests)\n          allMethods.forEach((fnName) => {\n            delete lastValue[fnName];\n          });\n        }\n      }\n      if (isArray(newValue)) {\n        // if new value array methods were already connected with another @observable\n        if (hasOwnProperty(newValue, PATCHED_KEY)) {\n          // clone new value to prevent corruption of another @observable (see unit tests)\n          newValue = [...newValue];\n        }\n        // if deep option is set\n        if (deep) {\n          // make all array items deep observable\n          for (let i = 0; i < newValue.length; ++i) {\n            newValue[i] = prepareDeepValue(newValue[i], hiddenObservable);\n          }\n        }\n        // mark instance as ObservableArray\n        defineProperty(newValue, PATCHED_KEY, {\n          value: true,\n        });\n        // call ko.observableArray.fn[fnName] instead of Array.prototype[fnName]\n        patchArrayMethods(newValue);\n      }\n    }\n    // update obsArray contents\n    insideObsArray = true;\n    obsArray(newValue);\n    insideObsArray = false;\n  }\n\n  function patchArrayMethods(array: any[]) {\n    const arrayMethods = deep ? deepArrayMethods : allArrayMethods;\n\n    arrayMethods.forEach((fnName) => defineProperty(array, fnName, {\n      value() {\n        if (insideObsArray) {\n          return ArrayPrototype[fnName].apply(array, arguments);\n        }\n        insideObsArray = true;\n        const result = obsArray[fnName].apply(obsArray, arguments);\n        insideObsArray = false;\n        return result;\n      },\n    }));\n\n    const observableArrayMethods = deep ? deepObservableArrayMethods : allObservableArrayMethods;\n\n    observableArrayMethods.forEach((fnName) => defineProperty(array, fnName, {\n      value() {\n        insideObsArray = true;\n        const result = obsArray[fnName].apply(obsArray, arguments);\n        insideObsArray = false;\n        return result;\n      },\n    }));\n\n    if (deep) {\n      defineProperty(array, \"push\", {\n        value() {\n          if (insideObsArray) {\n            return ArrayPrototype.push.apply(array, arguments);\n          }\n          const args = arraySlice(arguments);\n          for (let i = 0; i < args.length; ++i) {\n            args[i] = prepareDeepValue(args[i], hiddenObservable);\n          }\n          insideObsArray = true;\n          const result = obsArray.push.apply(obsArray, args);\n          insideObsArray = false;\n          return result;\n        },\n      });\n\n      defineProperty(array, \"unshift\", {\n        value() {\n          if (insideObsArray) {\n            return ArrayPrototype.unshift.apply(array, arguments);\n          }\n          const args = arraySlice(arguments);\n          for (let i = 0; i < args.length; ++i) {\n            args[i] = prepareDeepValue(args[i], hiddenObservable);\n          }\n          insideObsArray = true;\n          const result = obsArray.unshift.apply(obsArray, args);\n          insideObsArray = false;\n          return result;\n        },\n      });\n\n      defineProperty(array, \"splice\", {\n        value() {\n          if (insideObsArray) {\n            return ArrayPrototype.splice.apply(array, arguments);\n          }\n\n          let result: any[];\n\n          insideObsArray = true;\n          switch (arguments.length) {\n            case 0:\n            case 1:\n            case 2: {\n              result = obsArray.splice.apply(obsArray, arguments);\n              break;\n            }\n            case 3: {\n              result = obsArray.splice(\n                arguments[0], arguments[1], prepareDeepValue(arguments[2], hiddenObservable),\n              );\n              break;\n            }\n            default: {\n              const args = arraySlice(arguments);\n              for (let i = 2; i < args.length; ++i) {\n                args[i] = prepareDeepValue(args[i], hiddenObservable);\n              }\n              result = obsArray.splice.apply(obsArray, arguments);\n              break;\n            }\n          }\n          insideObsArray = false;\n\n          return result;\n        },\n      });\n\n      defineProperty(array, \"replace\", {\n        value(oldItem: any, newItem: any) {\n          insideObsArray = true;\n          const result = obsArray.replace(oldItem, prepareDeepValue(newItem, hiddenObservable));\n          insideObsArray = false;\n          return result;\n        },\n      });\n\n      defineProperty(array, \"mutate\", {\n        value(mutator: (array?: any[]) => void) {\n          const nativeArray = obsArray.peek();\n          // it is defined for ko.observableArray\n          (obsArray.valueWillMutate as Function)();\n          mutator(nativeArray);\n          for (let i = 0; i < nativeArray.length; ++i) {\n            nativeArray[i] = prepareDeepValue(nativeArray[i], hiddenObservable);\n          }\n          // it is defined for ko.observableArray\n          (obsArray.valueHasMutated as Function)();\n        },\n      });\n\n      defineProperty(array, \"set\", {\n        value(index: number, newItem: any) {\n          return obsArray.splice(index, 1, prepareDeepValue(newItem, hiddenObservable))[0];\n        },\n      });\n    } else {\n      defineProperty(array, \"mutate\", {\n        value(mutator: (array?: any[]) => void) {\n          // it is defined for ko.observableArray\n          (obsArray.valueWillMutate as Function)();\n          mutator(obsArray.peek());\n          // it is defined for ko.observableArray\n          (obsArray.valueHasMutated as Function)();\n        },\n      });\n\n      defineProperty(array, \"set\", {\n        value(index: number, newItem: any) {\n          return obsArray.splice(index, 1, newItem)[0];\n        },\n      });\n    }\n  }\n}\n","/**\n * Copyright (c) 2016-2017 Dmitry Panyushkin\n * Available under MIT license\n * Version: 1.0.1\n */\nimport * as ko from \"knockout\";\nimport {\n  defineProperty, extendObject, getOwnPropertyDescriptor, hasOwnProperty, isArray, PATCHED_KEY, SUBSCRIPTIONS_KEY,\n} from \"./common-functions\";\nimport { defineEventProperty } from \"./event-property\";\nimport { defineObservableArray } from \"./observable-array\";\nimport { defineObservableProperty } from \"./observable-property\";\nimport { applyExtenders, defineExtenders } from \"./property-extenders\";\n\n/**\n * Property decorator that creates hidden (shallow or deep) ko.observable with ES6 getter and setter for it\n * If initialized by Array then hidden ko.observableArray will be created\n */\nexport function observable(options: { deep?: boolean, hiddenObservable?: boolean }): PropertyDecorator;\n/**\n * Property decorator that creates hidden (shallow) ko.observable with ES6 getter and setter for it\n * If initialized by Array then hidden (shallow) ko.observableArray will be created\n */\nexport function observable(prototype: Object, key: string | symbol): void;\n/**\n * Property decorator that creates hidden (shallow or deep) ko.observable with ES6 getter and setter for it\n * If initialized by Array then hidden (shallow or deep) ko.observableArray will be created\n */\nexport function observable(prototypeOrOptions: any, key?: any) {\n  observableArrayOption = false;\n  deepObservableOption = false;\n  hiddenObservablePropertyOption = false;\n  if (arguments.length === 1) {\n    deepObservableOption = prototypeOrOptions.deep;\n    hiddenObservablePropertyOption = prototypeOrOptions.hiddenObservable;\n    return observableDecorator;\n  }\n  return observableDecorator(prototypeOrOptions, key);\n}\n\n/**\n * Property decorator that creates hidden (shallow or deep) ko.observableArray with ES6 getter and setter for it\n */\nexport function observableArray(options: { deep?: boolean, hiddenObservable?: boolean }): PropertyDecorator;\n/**\n * Property decorator that creates hidden (shallow) ko.observableArray with ES6 getter and setter for it\n */\nexport function observableArray(prototype: Object, key: string | symbol): void;\n/**\n * Property decorator that creates hidden (shallow or deep) ko.observableArray with ES6 getter and setter for it\n */\nexport function observableArray(prototypeOrOptions: any, key?: any) {\n  observableArrayOption = true;\n  deepObservableOption = false;\n  hiddenObservablePropertyOption = false;\n  if (arguments.length === 1) {\n    deepObservableOption = prototypeOrOptions.deep;\n    hiddenObservablePropertyOption = prototypeOrOptions.hiddenObservable;\n    return observableDecorator;\n  }\n  return observableDecorator(prototypeOrOptions, key);\n}\n\n// observableDecorator options\nlet observableArrayOption: boolean;\nlet deepObservableOption: boolean;\nlet hiddenObservablePropertyOption: boolean;\n\nfunction observableDecorator(prototype: Object, propKey: string | symbol) {\n  const array = observableArrayOption;\n  const deep = deepObservableOption;\n  const hiddenObservable = hiddenObservablePropertyOption;\n  defineProperty(prototype, propKey, {\n    get() {\n      throw new Error(\"@observable property '\" + propKey.toString() + \"' was not initialized\");\n    },\n    set(this: Object, value: any) {\n      if (array || isArray(value)) {\n        defineObservableArray(this, propKey, value, deep, hiddenObservable);\n      } else {\n        defineObservableProperty(this, propKey, value, deep, hiddenObservable);\n      }\n    },\n  });\n}\n\nexport interface ObservableArray<T> extends Array<T> {\n  replace(oldItem: T, newItem: T): void;\n\n  remove(item: T): T[];\n  remove(removeFunction: (item: T) => boolean): T[];\n\n  removeAll(): T[];\n  removeAll(items: T[]): T[];\n\n  destroy(item: T): void;\n  destroy(destroyFunction: (item: T) => boolean): void;\n\n  destroyAll(): void;\n  destroyAll(items: T[]): void;\n\n  subscribe(callback: (val: T[]) => void): KnockoutSubscription;\n  subscribe(callback: (val: T[]) => void, callbackTarget: any): KnockoutSubscription;\n  subscribe(callback: (val: any[]) => void, callbackTarget: any, event: string): KnockoutSubscription;\n\n  /**\n   * Run mutator function that can write to array at some index (`array[index] = value;`)\n   * Then notify about observableArray changes\n   */\n  mutate(mutator: (arrayValue: T[]) => void): void;\n\n  /**\n   * Replace value at some index and return old value\n   */\n  set(index: number, value: T): T;\n}\n\n/*---------------------------------------------------------------------------*/\n\n/**\n * Accessor decorator that wraps ES6 getter to hidden ko.computed or ko.pureComputed\n *\n * Setter is not wrapped to hidden ko.pureComputed and stays unchanged\n *\n * But we can still extend getter @computed by extenders like { rateLimit: 500 }\n */\nexport function computed(options: { pure: boolean }): PropertyDecorator;\n/**\n * Accessor decorator that wraps ES6 getter to hidden ko.pureComputed\n *\n * Setter is not wrapped to hidden ko.pureComputed and stays unchanged\n *\n * But we can still extend getter @computed by extenders like { rateLimit: 500 }\n */\nexport function computed(prototype: Object, key: string | symbol, desc?: PropertyDescriptor): PropertyDescriptor;\n/**\n * Accessor decorator that wraps ES6 getter to hidden ko.computed or ko.pureComputed\n *\n * Setter is not wrapped to hidden ko.pureComputed and stays unchanged\n *\n * But we can still extend getter @computed by extenders like { rateLimit: 500 }\n */\nexport function computed(prototypeOrOptinos: any, key?: any, propDesc?: any): any {\n  computedDecoratorOptions = { pure: true };\n\n  if (arguments.length === 1) {\n    computedDecoratorOptions = prototypeOrOptinos;\n    return computedDecorator;\n  }\n  return computedDecorator(prototypeOrOptinos, key, propDesc);\n}\n\n// computedDecorator options\nlet computedDecoratorOptions: { pure: boolean };\n\nfunction computedDecorator(prototype: Object, propKey: string | symbol, desc: PropertyDescriptor) {\n  const options = computedDecoratorOptions;\n  const { get, set } = desc || (desc = getOwnPropertyDescriptor(prototype, propKey));\n  if (!get) {\n    throw new Error(\"@computed property '\" + propKey.toString() + \"' has no getter\");\n  }\n  desc.get = function (this: Object) {\n    const koComputed = applyExtenders(this, propKey, ko.computed(get, this, options));\n    defineProperty(this, propKey, {\n      get: koComputed,\n      // tslint:disable-next-line:object-literal-shorthand\n      set: set,\n    });\n    return koComputed();\n  };\n  return desc;\n}\n\n/*---------------------------------------------------------------------------*/\n\n/**\n * Apply extenders to decorated @observable\n */\nexport function extend(extenders: Object): PropertyDecorator;\n/**\n * Apply extenders to decorated @observable\n */\nexport function extend(extendersFactory: () => Object): PropertyDecorator;\n/**\n * Apply extenders to decorated @observable\n * @extendersOrFactory { Object | Function } Knockout extenders definition or factory that produces definition\n */\nexport function extend(extendersOrFactory: Object | Function) {\n  return function (prototype: Object, key: string | symbol) {\n    defineExtenders(prototype, key, extendersOrFactory);\n  };\n}\n\n/*---------------------------------------------------------------------------*/\n\nexport type ComponentConstructor = new (\n  params?: any,\n  element?: Node,\n  templateNodes?: Node[],\n) => any;\n\nexport type ComponentDecorator = (constructor: ComponentConstructor) => void;\n\nexport type TemplateConfig = (\n  string\n  | Node[]\n  | DocumentFragment\n  | { require: string }\n  | { element: string | Node }\n);\n\n/**\n * Register Knockout component by decorating ViewModel class\n */\nexport function component(\n  name: string,\n  options?: Object,\n): ComponentDecorator;\n/**\n * Register Knockout component by decorating ViewModel class\n */\nexport function component(\n  name: string,\n  template: TemplateConfig,\n  options?: Object,\n): ComponentDecorator;\n/**\n * Register Knockout component by decorating ViewModel class\n */\nexport function component(\n  name: string,\n  template: TemplateConfig,\n  styles: string | string[],\n  options?: Object,\n): ComponentDecorator;\n/**\n * Register Knockout component by decorating ViewModel class\n * @param name {String} Name of component\n * @param template {Any} Knockout template definition\n * @param styles {Any} Ignored parameter (used for `require()` styles by webpack etc.)\n * @param options {Object} Another options that passed directly to `ko.components.register()`\n */\nexport function component(\n  name: string,\n  template?: any,\n  styles?: any,\n  options?: Object,\n) {\n  if (options === void 0) {\n    if (styles === void 0) {\n      if (typeof template === \"object\"\n        && template.constructor === Object\n        && !(\"require\" in template)\n        && !(\"element\" in template)\n      ) {\n        options = template;\n        template = void 0;\n      }\n    } else if (typeof styles === \"object\") {\n      options = styles;\n      styles = void 0;\n    }\n  }\n\n  return function (constructor: ComponentConstructor) {\n    ko.components.register(name, extendObject({\n      viewModel: constructor.length < 2 ? constructor : {\n        createViewModel(params: any, {\n          element, templateNodes,\n        }: {\n            element: Node, templateNodes: Node[],\n          }) {\n          return new constructor(params, element, templateNodes);\n        },\n      },\n      template: template || \"<!---->\",\n      synchronous: true,\n    }, options as Object));\n  };\n}\n\n/*---------------------------------------------------------------------------*/\n\n/**\n * Like https://github.com/jayphelps/core-decorators.js @autobind but less smart and complex\n * Do NOT use with ES6 inheritance!\n */\nexport function autobind(prototype: Object, key: string | symbol, desc?: PropertyDescriptor) {\n  const { value, configurable, enumerable } = desc || (desc = getOwnPropertyDescriptor(prototype, key));\n  return {\n    // tslint:disable-next-line:object-literal-shorthand\n    configurable: configurable,\n    // tslint:disable-next-line:object-literal-shorthand\n    enumerable: enumerable,\n    get(this: Object) {\n      if (this === prototype) {\n        return value;\n      }\n      const bound = value.bind(this);\n      defineProperty(this, key, {\n        value: bound,\n      });\n      return bound;\n    },\n  } as PropertyDescriptor;\n}\n\n/*---------------------------------------------------------------------------*/\n\n/**\n * Define hidden ko.subscribable, that notifies subscribers when decorated method is invoked\n */\nexport function event(prototype: Object, key: string | symbol) {\n  defineProperty(prototype, key, {\n    get(this: Object) {\n      return defineEventProperty(this, key);\n    },\n  });\n}\n\nexport type EventType = Function & {\n  subscribe(callback: Function): KnockoutSubscription;\n};\n\n/*---------------------------------------------------------------------------*/\n\n/**\n * Subscribe callback to `@observable` or `@computed` dependency changes or to some `@event` property\n */\nexport function subscribe<T>(\n  dependencyOrEvent: () => T,\n  callback: (value: T) => void,\n  options?: { once?: boolean, event?: \"change\" | \"beforeChange\" },\n): KnockoutSubscription;\n/**\n * Subscribe callback to `@observableArray` dependency \"arrayChange\" event\n */\nexport function subscribe<T>(\n  dependency: () => T[],\n  callback: (value: {\n    status: \"added\" | \"deleted\";\n    value: T;\n    index: number;\n  }[]) => void,\n  options: { once?: boolean, event: \"arrayChange\" },\n): KnockoutSubscription;\n/**\n * Subscribe callback to some `@event` property\n */\nexport function subscribe<T>(\n  event: (arg: T) => void,\n  callback: (arg: T) => void,\n  options?: { once?: boolean },\n): KnockoutSubscription;\n/**\n * Subscribe callback to some `@event` property\n */\nexport function subscribe<T1, T2>(\n  event: (arg1: T1, arg2: T2) => void,\n  callback: (arg1: T1, arg2: T2) => void,\n  options?: { once?: boolean },\n): KnockoutSubscription;\n/**\n * Subscribe callback to some `@event` property\n */\nexport function subscribe<T1, T2, T3>(\n  event: (arg1: T1, arg2: T2, arg3: T3, ...args: any[]) => void,\n  callback: (arg1: T1, arg2: T2, arg3: T3, ...args: any[]) => void,\n  options?: { once?: boolean },\n): KnockoutSubscription;\n/**\n * Subscribe callback to `@observable` or `@computed` dependency changes or to some `@event`\n */\nexport function subscribe(\n  dependencyOrEvent: Function,\n  callback: (...args: any[]) => void,\n  options?: { once?: boolean, event?: \"change\" | \"beforeChange\" | \"arrayChange\" },\n) {\n  const once = options && options.once || false;\n\n  if (hasOwnProperty(dependencyOrEvent, \"subscribe\")) {\n    // overload: subscribe to @event property\n    const eventFunc = dependencyOrEvent as EventType;\n\n    if (once) {\n      const subscription = eventFunc.subscribe(function () {\n        subscription.dispose();\n        callback.apply(null, arguments);\n      });\n      return subscription;\n    } else {\n      return eventFunc.subscribe(callback);\n    }\n  } else {\n    // overload: subscribe to @observable or @computed\n    const eventFunc = options && options.event || \"change\";\n\n    let handler: (value: any) => void;\n    let subscription: KnockoutSubscription;\n\n    if (once) {\n      handler = function () {\n        subscription.dispose();\n        callback.apply(null, arguments);\n      };\n    } else {\n      handler = callback;\n    }\n\n    if (eventFunc === \"arrayChange\") {\n      const obsArray = dependencyOrEvent() as ObservableArray<any>;\n\n      if (isArray(obsArray) && hasOwnProperty(obsArray, PATCHED_KEY)) {\n        subscription = obsArray.subscribe(handler, null, eventFunc);\n      } else {\n        throw new Error(\"Can not subscribe to 'arrayChange' because dependency is not an 'observableArray'\");\n      }\n    } else {\n      const koComputed = ko.computed(dependencyOrEvent as () => any);\n\n      subscription = koComputed.subscribe(handler, null, eventFunc);\n\n      const originalDispose = subscription.dispose;\n      // dispose hidden computed with subscription\n      subscription.dispose = function (this: KnockoutSubscription) {\n        originalDispose.call(this);\n        koComputed.dispose();\n      };\n    }\n    return subscription;\n  }\n}\n\n/*---------------------------------------------------------------------------*/\n\n/**\n * Get internal ko.observable() for object property decodated by @observable\n */\nexport function unwrap(instance: Object, key: string | symbol): any;\n/**\n * Get internal ko.observable() for object property decodated by @observable\n */\nexport function unwrap<T>(instance: Object, key: string | symbol): KnockoutObservable<T>;\n/**\n * Get internal ko.observable() for object property decodated by @observable\n */\nexport function unwrap(instance: Object, key: string | symbol) {\n  if (!hasOwnProperty(instance, key)) {\n    // invoke getter on instance.__proto__ that defines property on instance\n    // tslint:disable-next-line:no-unused-expression\n    instance[key];\n  }\n  return getOwnPropertyDescriptor(instance, key).get;\n}\n\n/*---------------------------------------------------------------------------*/\n/**\n * Mixin which add `subscribe()` instance method and implement `dispose()` method,\n * that disposes all subscription created by `subscribe()`\n */\nexport interface Disposable {\n  /** Dispose all subscriptions from this class */\n  dispose(): void;\n\n  /** Subscribe callback to `@observable` or `@computed` dependency changes or to some `@event` property */\n  subscribe<T>(\n    dependencyOrEvent: () => T,\n    callback: (value: T) => void,\n    options?: { once?: boolean, event?: \"change\" | \"beforeChange\" },\n  ): KnockoutSubscription;\n  /** Subscribe callback to `@observableArray` dependency \"arrayChange\" event */\n  subscribe<T>(\n    dependency: () => T[],\n    callback: (value: {\n      status: \"added\" | \"deleted\";\n      value: T;\n      index: number;\n    }[]) => void,\n    options: { once?: boolean, event: \"arrayChange\" },\n  ): KnockoutSubscription;\n  /** Subscribe callback to some `@event` property */\n  subscribe<T>(\n    event: (arg: T) => void,\n    callback: (arg: T) => void,\n    options?: { once?: boolean },\n  ): KnockoutSubscription;\n  /** Subscribe callback to some `@event` property */\n  subscribe<T1, T2>(\n    event: (arg1: T1, arg2: T2) => void,\n    callback: (arg1: T1, arg2: T2) => void,\n    options?: { once?: boolean },\n  ): KnockoutSubscription;\n  /** Subscribe callback to some `@event` property */\n  subscribe<T1, T2, T3>(\n    event: (arg1: T1, arg2: T2, arg3: T3, ...args: any[]) => void,\n    callback: (arg1: T1, arg2: T2, arg3: T3, ...args: any[]) => void,\n    options?: { once?: boolean },\n  ): KnockoutSubscription;\n\n  /** Get internal ko.observable() for class property decodated by `@observable` */\n  unwrap(key: string | symbol): any;\n  /** Get internal ko.observable() for class property decodated by `@observable` */\n  unwrap<T>(key: string | symbol): KnockoutObservable<T>;\n}\n\n/**\n * Mixin which add `subscribe()` instance method and implement `dispose()` method,\n * that disposes all subscription created by `subscribe()`\n */\nexport function Disposable(): new () => Disposable;\n/**\n * Mixin which add `subscribe()` instance method and implement `dispose()` method,\n * that disposes all subscription created by `subscribe()`\n * @param Base {Function} Base class to extend\n */\nexport function Disposable<T extends Function>(\n  // tslint:disable-next-line:variable-name\n  Base: T,\n): (new (...args: any[]) => Disposable) & T;\n/**\n * Mixin which add `subscribe()` instance method and implement `dispose()` method,\n * that disposes all subscription created by `subscribe()`\n * @param Base {Function} Base class to extend\n */\nexport function Disposable<T extends new (...args: any[]) => any>(\n  // tslint:disable-next-line:variable-name\n  Base?: T,\n) {\n  if (typeof Base === \"undefined\") {\n    Base = class { } as T;\n  }\n  return class extends Base {\n    /** Dispose all subscriptions from this class */\n    dispose() {\n      const subscriptions: KnockoutSubscription[] = this[SUBSCRIPTIONS_KEY];\n      if (subscriptions) {\n        subscriptions.forEach((subscription) => {\n          subscription.dispose();\n        });\n        delete this[SUBSCRIPTIONS_KEY];\n      }\n    }\n\n    /** Subscribe callback to `@observable` or `@computed` dependency changes or to some `@event` */\n    subscribe() {\n      const subscription: KnockoutSubscription = subscribe.apply(null, arguments);\n      const subscriptions: KnockoutSubscription[] = this[SUBSCRIPTIONS_KEY] || (this[SUBSCRIPTIONS_KEY] = []);\n      subscriptions.push(subscription);\n      return subscription;\n    }\n\n    /** Get internal ko.observable() for class property decodated by `@observable` */\n    unwrap(key: string) {\n      return unwrap(this, key);\n    }\n  };\n}\n"],"names":["ko.utils","subscribable","ko.subscribable","observable","ko.observable","ko.observableArray","ko.computed","ko.components"],"mappings":"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"}