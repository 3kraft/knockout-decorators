{"version":3,"file":null,"sources":["../src/knockout-decorators.ts"],"sourcesContent":["import * as ko from \"knockout\";\r\n\r\nexport interface ComponentConstructor {\r\n    new (\r\n        params?: any,\r\n        element?: Node,\r\n        templateNodes?: Node[]\r\n    ): any;\r\n}\r\n\r\nexport type ComponentDecorator = (constructor: ComponentConstructor) => void;\r\n\r\nexport type TemplateConfig = (\r\n    string\r\n    | Node[] \r\n    | DocumentFragment \r\n    | { require: string }\r\n    | { element: string | Node }\r\n);\r\n\r\nconst extend = ko.utils.extend;\r\n\r\n/**\r\n * Register Knockout component by decorating ViewModel class\r\n */\r\nexport function component(\r\n    name: string,\r\n    options?: Object\r\n): ComponentDecorator;\r\nexport function component(\r\n    name: string,\r\n    template: TemplateConfig,\r\n    options?: Object\r\n): ComponentDecorator;\r\nexport function component(\r\n    name: string,\r\n    template: TemplateConfig,\r\n    styles: string | string[],\r\n    options?: Object\r\n): ComponentDecorator;\r\n\r\n/**\r\n * Register Knockout component by decorating ViewModel class\r\n */\r\nexport function component(\r\n    name: string,\r\n    template?: any,\r\n    styles?: any,\r\n    options?: Object\r\n) {\r\n    if (options === void 0) {\r\n        if (styles === void 0) {\r\n            if (typeof template === \"object\"\r\n                && template.constructor === Object\r\n                && !(\"require\" in template)\r\n                && !(\"element\" in template)\r\n            ) {\r\n                options = template;\r\n                template = void 0;\r\n            }\r\n        } else if (typeof styles === \"object\") {\r\n            options = styles;\r\n            styles = void 0;\r\n        }\r\n    }\r\n\r\n    return function (constructor: ComponentConstructor) {\r\n        ko.components.register(name, extend({\r\n            viewModel: constructor.length < 2 ? constructor : {\r\n                createViewModel(params, { element, templateNodes }) {\r\n                    return new constructor(params, element, templateNodes);\r\n                }\r\n            },\r\n            template: template || \"<!---->\",\r\n            synchronous: true,\r\n        }, options));\r\n    }\r\n}\r\n\r\nconst defProp = Object.defineProperty.bind(Object);\r\n\r\n/**\r\n * Property decorator that creates hidden ko.observable with ES6 getter and setter for it\r\n */\r\nexport function observable(target: Object, key: string | symbol) {\r\n    defProp(target, key, {\r\n        get() {\r\n            const observable = ko.observable();\r\n            defProp(this, key, {\r\n                get: observable,\r\n                set: observable,\r\n            });\r\n            return observable();\r\n        },\r\n        set(value) {\r\n            const observable = ko.observable(value);\r\n            defProp(this, key, {\r\n                get: observable,\r\n                set: observable,\r\n            });\r\n        },\r\n    });\r\n}\r\n\r\n/**\r\n * Accessor decorator that wraps ES6 getter and setter to hidden ko.pureComputed\r\n */\r\nexport function computed(target: Object, key: string | symbol) {\r\n    const { get, set } = Object.getOwnPropertyDescriptor(target, key);\r\n    if (!set) {\r\n        defProp(target, key, {\r\n            get() {\r\n                const computed = ko.pureComputed(get, this);\r\n                defProp(this, key, {\r\n                    get: computed,\r\n                });\r\n                return computed();\r\n            }\r\n        });\r\n    } else {\r\n        defProp(target, key, {\r\n            get() {\r\n                const computed = ko.pureComputed({\r\n                    read: get,\r\n                    write: set,\r\n                    owner: this,\r\n                });\r\n                defProp(this, key, {\r\n                    get: computed,\r\n                    set: computed,\r\n                });\r\n                return computed();\r\n            },\r\n            set(value) {\r\n                const computed = ko.pureComputed({\r\n                    read: get,\r\n                    write: set,\r\n                    owner: this,\r\n                });\r\n                defProp(this, key,  {\r\n                    get: computed,\r\n                    set: computed,\r\n                });\r\n                computed(value);\r\n            },\r\n        });\r\n    }\r\n}"],"names":["name","template","styles","options","constructor","Object","ko","components","register","extend","viewModel","length","createViewModel","params","_a","element","templateNodes","synchronous","target","key","defProp","get","observable","this","set","value","computed","pureComputed","read","write","owner","utils","defineProperty","bind"],"mappings":"gQA4CA,YACIA,EACAC,EACAC,EACAC,GAkBA,MAhBgB,UAAZA,IACe,SAAXD,EACwB,gBAAbD,IACJA,EAASG,cAAgBC,QACvB,WAAaJ,IACb,WAAaA,KAElBE,EAAUF,EACVA,EAAW,QAEU,gBAAXC,KACdC,EAAUD,EACVA,EAAS,SAIV,SAAUE,GACbE,EAAGC,WAAWC,SAASR,EAAMS,GACzBC,UAAWN,EAAYO,OAAS,EAAIP,GAChCQ,yBAAgBC,EAAQC,MAAEC,aAASC,iBAC/B,OAAO,IAAIZ,GAAYS,EAAQE,EAASC,KAGhDf,SAAUA,GAAY,UACtBgB,aAAa,GACdd,KASX,WAA2Be,EAAgBC,GACvCC,EAAQF,EAAQC,GACZE,eACI,GAAMC,GAAahB,EAAGgB,YAKtB,OAJAF,GAAQG,KAAMJ,GACVE,IAAKC,EACLE,IAAKF,IAEFA,KAEXE,aAAIC,GACA,GAAMH,GAAahB,EAAGgB,WAAWG,EACjCL,GAAQG,KAAMJ,GACVE,IAAKC,EACLE,IAAKF,OASrB,WAAyBJ,EAAgBC,GACrC,GAAAL,wCAAQO,QAAKG,OACRA,GAWDJ,EAAQF,EAAQC,GACZE,eACI,GAAMK,GAAWpB,EAAGqB,cAChBC,KAAMP,EACNQ,MAAOL,EACPM,MAAOP,MAMX,OAJAH,GAAQG,KAAMJ,GACVE,IAAKK,EACLF,IAAKE,IAEFA,KAEXF,aAAIC,GACA,GAAMC,GAAWpB,EAAGqB,cAChBC,KAAMP,EACNQ,MAAOL,EACPM,MAAOP,MAEXH,GAAQG,KAAMJ,GACVE,IAAKK,EACLF,IAAKE,IAETA,EAASD,MAjCjBL,EAAQF,EAAQC,GACZE,eACI,GAAMK,GAAWpB,EAAGqB,aAAaN,EAAKE,KAItC,OAHAH,GAAQG,KAAMJ,GACVE,IAAKK,IAEFA,OAhGvB,GAAMjB,GAASH,EAAGyB,MAAMtB,OA2DlBW,EAAUf,OAAO2B,eAAeC,KAAK5B"}