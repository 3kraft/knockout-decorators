{"version":3,"file":null,"sources":["../src/common-functions.ts","../src/event-property.ts","../src/property-extenders.ts","../src/observable-property.ts","../src/observable-array.ts","../src/knockout-decorators.ts"],"sourcesContent":["/**\r\n * Copyright (c) 2016-2017 Dmitry Panyushkin\r\n * Available under MIT license\r\n */\r\nimport * as ko from \"knockout\";\r\n\r\nconst prefix = \"__ko_decorators_\";\r\n\r\nexport let PATCHED_KEY: string | symbol = prefix + \"patched__\";\r\nexport let EXTENDERS_KEY: string | symbol = prefix + \"extenders__\";\r\nexport let SUBSCRIPTIONS_KEY: string | symbol = prefix + \"subscriptions__\";\r\n\r\nif (typeof Symbol !== \"undefined\") {\r\n    PATCHED_KEY = Symbol(PATCHED_KEY);\r\n    EXTENDERS_KEY = Symbol(EXTENDERS_KEY);\r\n    SUBSCRIPTIONS_KEY = Symbol(SUBSCRIPTIONS_KEY);\r\n}\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const ArrayPrototype = Array.prototype;\r\n\r\nexport function defineProperty(instance: Object, key: any, descriptor: PropertyDescriptor) {\r\n    descriptor.configurable = true;\r\n    Object.defineProperty(instance, key, descriptor);\r\n}\r\n\r\nexport const extendObject = ko.utils.extend;\r\nexport const objectForEach = ko.utils.objectForEach;\r\nexport const isArray = Array.isArray.bind(Array);\r\nexport const getPrototypeOf = Object.getPrototypeOf.bind(Object);\r\nexport const getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor.bind(Object);\r\nexport const hasOwnProperty = Function.prototype.call.bind(Object.prototype.hasOwnProperty);\r\nexport const arraySlice = Function.prototype.call.bind(ArrayPrototype.slice);\r\n","/**\r\n * Copyright (c) 2016-2017 Dmitry Panyushkin\r\n * Available under MIT license\r\n */\r\nimport * as ko from \"knockout\";\r\nimport { arraySlice, defineProperty } from \"./common-functions\";\r\nimport { EventType } from \"./knockout-decorators\";\r\n\r\nexport function defineEventProperty(instance: Object, key: string | symbol) {\r\n    const subscribable = new ko.subscribable<any[]>();\r\n\r\n    const event: EventType = function () {\r\n        const eventArgs = arraySlice(arguments);\r\n        subscribable.notifySubscribers(eventArgs);\r\n    } as any;\r\n\r\n    event.subscribe = function (callback: Function) {\r\n        return subscribable.subscribe(function (eventArgs: any[]) {\r\n            callback.apply(null, eventArgs);\r\n        });\r\n    };\r\n\r\n    defineProperty(instance, key, {\r\n        value: event,\r\n    });\r\n\r\n    return event;\r\n}\r\n","/**\r\n * Copyright (c) 2016-2017 Dmitry Panyushkin\r\n * Available under MIT license\r\n */\r\nimport { EXTENDERS_KEY, extendObject, hasOwnProperty, objectForEach } from \"./common-functions\";\r\n\r\ntype Extender = Object | Function;\r\n\r\ninterface ExtendersDictionary {\r\n    [propName: string]: Extender[];\r\n}\r\n\r\nexport function applyExtenders(\r\n    instance: Object, key: string | symbol,\r\n    target: KnockoutObservable<any> | KnockoutComputed<any>,\r\n) {\r\n    const dictionary = instance[EXTENDERS_KEY] as ExtendersDictionary;\r\n    const extenders = dictionary && dictionary[key];\r\n    if (extenders) {\r\n        extenders.forEach((extender) => {\r\n            const koExtender = extender instanceof Function\r\n                ? extender.call(instance) : extender;\r\n\r\n            target = target.extend(koExtender);\r\n        });\r\n    }\r\n    return target;\r\n}\r\n\r\nexport function defineExtenders(\r\n    prototype: Object, key: string | symbol,\r\n    extendersOrFactory: Object | Function,\r\n) {\r\n    let dictionary = prototype[EXTENDERS_KEY] as ExtendersDictionary;\r\n    // if there is no ExtendersDictionary or ExtendersDictionary lives in base class prototype\r\n    if (!hasOwnProperty(prototype, EXTENDERS_KEY)) {\r\n        // clone ExtendersDictionary from base class prototype or create new ExtendersDictionary\r\n        prototype[EXTENDERS_KEY] = dictionary = extendObject({}, dictionary) as ExtendersDictionary;\r\n        // clone Extenders arrays for each property key\r\n        objectForEach(dictionary, (existingKey, extenders) => {\r\n            dictionary[existingKey] = [...extenders];\r\n        });\r\n    }\r\n    // get existing Extenders array or create new array\r\n    const extenders = dictionary[key] || (dictionary[key] = []);\r\n    // add new Extenders\r\n    extenders.push(extendersOrFactory);\r\n}\r\n","/**\r\n * Copyright (c) 2016-2017 Dmitry Panyushkin\r\n * Available under MIT license\r\n */\r\nimport * as ko from \"knockout\";\r\nimport {\r\n    defineProperty, getPrototypeOf, hasOwnProperty, isArray, objectForEach, PATCHED_KEY,\r\n} from \"./common-functions\";\r\nimport { defineObservableArray } from \"./observable-array\";\r\nimport { applyExtenders } from \"./property-extenders\";\r\n\r\nexport function defineObservableProperty(\r\n    instance: Object, key: string | symbol, value: any, deep: boolean,\r\n) {\r\n    const observable = applyExtenders(instance, key, ko.observable());\r\n\r\n    let setter = observable as any;\r\n\r\n    if (deep) {\r\n        setter = function (newValue: any) {\r\n            observable(prepareDeepValue(newValue));\r\n        };\r\n    }\r\n\r\n    defineProperty(instance, key, {\r\n        enumerable: true,\r\n        get: observable,\r\n        set: setter,\r\n    });\r\n\r\n    setter(value);\r\n}\r\n\r\nexport function prepareDeepValue(value: any) {\r\n    if (typeof value === \"object\") {\r\n        if (isArray(value) || value === null) {\r\n            // value is Array or null\r\n            return value;\r\n        } else if (hasOwnProperty(value, \"constructor\")) {\r\n            // there is redefined own property \"constructor\"\r\n            const prototype = getPrototypeOf(value);\r\n            if (prototype === Object.prototype || prototype === null) {\r\n                // value is plain Object\r\n                return prepareDeepObject(value);\r\n            }\r\n        } else if (value.constructor === Object) {\r\n            // value is plain Object\r\n            return prepareDeepObject(value);\r\n        }\r\n    }\r\n    // value is primitive, function or class instance\r\n    return value;\r\n}\r\n\r\nexport function prepareDeepObject(instance: Object) {\r\n    if (!hasOwnProperty(instance, PATCHED_KEY)) {\r\n        // mark instance as ObservableObject\r\n        defineProperty(instance, PATCHED_KEY, {\r\n            value: true,\r\n        });\r\n        // define deep observable properties\r\n        objectForEach(instance, (key, value) => {\r\n            if (isArray(value)) {\r\n                defineObservableArray(instance, key, value, true);\r\n            } else {\r\n                defineObservableProperty(instance, key, value, true);\r\n            }\r\n        });\r\n    }\r\n    return instance;\r\n}\r\n","/**\r\n * Copyright (c) 2016-2017 Dmitry Panyushkin\r\n * Available under MIT license\r\n */\r\nimport * as ko from \"knockout\";\r\nimport { ArrayPrototype, arraySlice, defineProperty, hasOwnProperty, isArray, PATCHED_KEY } from \"./common-functions\";\r\nimport { prepareDeepValue } from \"./observable-property\";\r\nimport { applyExtenders } from \"./property-extenders\";\r\n\r\ntype ObsArray = KnockoutObservableArray<any> & { [fnName: string]: Function };\r\n\r\nconst deepArrayMethods = [\"pop\", \"reverse\", \"shift\", \"sort\"];\r\nconst allArrayMethods = [...deepArrayMethods, \"push\", \"splice\", \"unshift\"];\r\n\r\nconst deepObservableArrayMethods = [\"remove\", \"removeAll\", \"destroy\", \"destroyAll\", \"replace\", \"subscribe\"];\r\nconst allObservableArrayMethods = [...deepObservableArrayMethods, \"replace\"];\r\n\r\nconst allMethods = [...allArrayMethods, ...allObservableArrayMethods, \"mutate\", \"set\"];\r\n\r\nexport function defineObservableArray(\r\n    instance: Object, key: string | symbol, value: any[], deep: boolean,\r\n) {\r\n    const obsArray = applyExtenders(instance, key, ko.observableArray()) as ObsArray;\r\n\r\n    let insideObsArray = false;\r\n\r\n    defineProperty(instance, key, {\r\n        enumerable: true,\r\n        get: obsArray,\r\n        set: setter,\r\n    });\r\n\r\n    setter(value);\r\n\r\n    function setter(newValue: any[]) {\r\n        const lastValue = obsArray.peek();\r\n        // if we got new value\r\n        if (lastValue !== newValue) {\r\n            if (isArray(lastValue)) {\r\n                // if lastValue array methods were already patched\r\n                if (hasOwnProperty(lastValue, PATCHED_KEY)) {\r\n                    delete lastValue[PATCHED_KEY];\r\n                    // clear patched array methods on lastValue (see unit tests)\r\n                    allMethods.forEach((fnName) => {\r\n                        delete lastValue[fnName];\r\n                    });\r\n                }\r\n            }\r\n            if (isArray(newValue)) {\r\n                // if new value array methods were already connected with another @observable\r\n                if (hasOwnProperty(newValue, PATCHED_KEY)) {\r\n                    // clone new value to prevent corruption of another @observable (see unit tests)\r\n                    newValue = [...newValue];\r\n                }\r\n                // if deep option is set\r\n                if (deep) {\r\n                    // make all array items deep observable\r\n                    for (let i = 0; i < newValue.length; ++i) {\r\n                        newValue[i] = prepareDeepValue(newValue[i]);\r\n                    }\r\n                }\r\n                // mark instance as ObservableArray\r\n                defineProperty(newValue, PATCHED_KEY, {\r\n                    value: true,\r\n                });\r\n                // call ko.observableArray.fn[fnName] instead of Array.prototype[fnName]\r\n                patchArrayMethods(newValue);\r\n            }\r\n        }\r\n        // update obsArray contents\r\n        insideObsArray = true;\r\n        obsArray(newValue);\r\n        insideObsArray = false;\r\n    }\r\n\r\n    function patchArrayMethods(array: any[]) {\r\n        const arrayMethods = deep ? deepArrayMethods : allArrayMethods;\r\n\r\n        arrayMethods.forEach((fnName) => defineProperty(array, fnName, {\r\n            value() {\r\n                if (insideObsArray) {\r\n                    return ArrayPrototype[fnName].apply(array, arguments);\r\n                }\r\n                insideObsArray = true;\r\n                const result = obsArray[fnName].apply(obsArray, arguments);\r\n                insideObsArray = false;\r\n                return result;\r\n            },\r\n        }));\r\n\r\n        const observableArrayMethods = deep ? deepObservableArrayMethods : allObservableArrayMethods;\r\n\r\n        observableArrayMethods.forEach((fnName) => defineProperty(array, fnName, {\r\n            value() {\r\n                insideObsArray = true;\r\n                const result = obsArray[fnName].apply(obsArray, arguments);\r\n                insideObsArray = false;\r\n                return result;\r\n            },\r\n        }));\r\n\r\n        if (deep) {\r\n            defineProperty(array, \"push\", {\r\n                value() {\r\n                    if (insideObsArray) {\r\n                        return ArrayPrototype.push.apply(array, arguments);\r\n                    }\r\n                    let args = arraySlice(arguments);\r\n                    for (let i = 0; i < args.length; ++i) {\r\n                        args[i] = prepareDeepValue(args[i]);\r\n                    }\r\n                    insideObsArray = true;\r\n                    const result = obsArray.push.apply(obsArray, args);\r\n                    insideObsArray = false;\r\n                    return result;\r\n                },\r\n            });\r\n\r\n            defineProperty(array, \"unshift\", {\r\n                value() {\r\n                    if (insideObsArray) {\r\n                        return ArrayPrototype.unshift.apply(array, arguments);\r\n                    }\r\n                    let args = arraySlice(arguments);\r\n                    for (let i = 0; i < args.length; ++i) {\r\n                        args[i] = prepareDeepValue(args[i]);\r\n                    }\r\n                    insideObsArray = true;\r\n                    const result = obsArray.unshift.apply(obsArray, args);\r\n                    insideObsArray = false;\r\n                    return result;\r\n                },\r\n            });\r\n\r\n            defineProperty(array, \"splice\", {\r\n                value() {\r\n                    if (insideObsArray) {\r\n                        return ArrayPrototype.splice.apply(array, arguments);\r\n                    }\r\n\r\n                    let result: any[];\r\n\r\n                    insideObsArray = true;\r\n                    switch (arguments.length) {\r\n                        case 0:\r\n                        case 1:\r\n                        case 2: {\r\n                            result = obsArray.splice.apply(obsArray, arguments);\r\n                            break;\r\n                        }\r\n                        case 3: {\r\n                            result = obsArray.splice(\r\n                                arguments[0], arguments[1], prepareDeepValue(arguments[2]),\r\n                            );\r\n                            break;\r\n                        }\r\n                        default: {\r\n                            const args = arraySlice(arguments);\r\n                            for (let i = 2; i < args.length; ++i) {\r\n                                args[i] = prepareDeepValue(args[i]);\r\n                            }\r\n                            result = obsArray.splice.apply(obsArray, arguments);\r\n                            break;\r\n                        }\r\n                    }\r\n                    insideObsArray = false;\r\n\r\n                    return result;\r\n                },\r\n            });\r\n\r\n            defineProperty(array, \"replace\", {\r\n                value(oldItem: any, newItem: any) {\r\n                    insideObsArray = true;\r\n                    const result = obsArray.replace(oldItem, prepareDeepValue(newItem));\r\n                    insideObsArray = false;\r\n                    return result;\r\n                },\r\n            });\r\n\r\n            defineProperty(array, \"mutate\", {\r\n                value(mutator: (array?: any[]) => void) {\r\n                    const nativeArray = obsArray.peek();\r\n                    // it is defined for ko.observableArray\r\n                    (obsArray.valueWillMutate as Function)();\r\n                    mutator(nativeArray);\r\n                    for (let i = 0; i < nativeArray.length; ++i) {\r\n                        nativeArray[i] = prepareDeepValue(nativeArray[i]);\r\n                    }\r\n                    // it is defined for ko.observableArray\r\n                    (obsArray.valueHasMutated as Function)();\r\n                },\r\n            });\r\n\r\n            defineProperty(array, \"set\", {\r\n                value(index: number, newItem: any) {\r\n                    return obsArray.splice(index, 1, prepareDeepValue(newItem))[0];\r\n                },\r\n            });\r\n        } else {\r\n            defineProperty(array, \"mutate\", {\r\n                value(mutator: (array?: any[]) => void) {\r\n                    // it is defined for ko.observableArray\r\n                    (obsArray.valueWillMutate as Function)();\r\n                    mutator(obsArray.peek());\r\n                    // it is defined for ko.observableArray\r\n                    (obsArray.valueHasMutated as Function)();\r\n                },\r\n            });\r\n\r\n            defineProperty(array, \"set\", {\r\n                value(index: number, newItem: any) {\r\n                    return obsArray.splice(index, 1, newItem)[0];\r\n                },\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nexport interface ObservableArray<T> extends Array<T> {\r\n    replace(oldItem: T, newItem: T): void;\r\n\r\n    remove(item: T): T[];\r\n    remove(removeFunction: (item: T) => boolean): T[];\r\n\r\n    removeAll(): T[];\r\n    removeAll(items: T[]): T[];\r\n\r\n    destroy(item: T): void;\r\n    destroy(destroyFunction: (item: T) => boolean): void;\r\n\r\n    destroyAll(): void;\r\n    destroyAll(items: T[]): void;\r\n\r\n    subscribe(callback: (val: T[]) => void): KnockoutSubscription;\r\n    subscribe(callback: (val: T[]) => void, callbackTarget: any): KnockoutSubscription;\r\n    subscribe(callback: (val: any[]) => void, callbackTarget: any, event: string): KnockoutSubscription;\r\n\r\n    /**\r\n     * Run mutator function that can write to array at some index (`array[index] = value;`)\r\n     * Then notify about observableArray changes\r\n     */\r\n    mutate(mutator: (arrayValue: T[]) => void): void;\r\n\r\n    /**\r\n     * Replace value at some index and return old value\r\n     */\r\n    set(index: number, value: T): T;\r\n}\r\n","/**\r\n * Copyright (c) 2016-2017 Dmitry Panyushkin\r\n * Available under MIT license\r\n * Version: 1.0.0\r\n */\r\nimport * as ko from \"knockout\";\r\nimport {\r\n    defineProperty, extendObject, getOwnPropertyDescriptor, hasOwnProperty, isArray, PATCHED_KEY, SUBSCRIPTIONS_KEY,\r\n} from \"./common-functions\";\r\nimport { defineEventProperty } from \"./event-property\";\r\nimport { defineObservableArray } from \"./observable-array\";\r\nimport { defineObservableProperty } from \"./observable-property\";\r\nimport { applyExtenders, defineExtenders } from \"./property-extenders\";\r\n\r\n/**\r\n * Property decorator that creates hidden (shallow or deep) ko.observable with ES6 getter and setter for it\r\n * If initialized by Array then hidden ko.observableArray will be created\r\n */\r\nexport function observable(options: { deep: boolean }): PropertyDecorator;\r\n/**\r\n * Property decorator that creates hidden (shallow) ko.observable with ES6 getter and setter for it\r\n * If initialized by Array then hidden (shallow) ko.observableArray will be created\r\n */\r\nexport function observable(prototype: Object, key: string | symbol): void;\r\n/**\r\n * Property decorator that creates hidden (shallow or deep) ko.observable with ES6 getter and setter for it\r\n * If initialized by Array then hidden (shallow or deep) ko.observableArray will be created\r\n */\r\nexport function observable(prototypeOrOptions: any, key?: any) {\r\n    observableArrayOption = false;\r\n    deepObservableOption = false;\r\n    if (arguments.length === 1) {\r\n        deepObservableOption = prototypeOrOptions.deep;\r\n        return observableDecorator;\r\n    }\r\n    return observableDecorator(prototypeOrOptions, key);\r\n}\r\n\r\n/**\r\n * Property decorator that creates hidden (shallow or deep) ko.observableArray with ES6 getter and setter for it\r\n */\r\nexport function observableArray(options: { deep: boolean }): PropertyDecorator;\r\n/**\r\n * Property decorator that creates hidden (shallow) ko.observableArray with ES6 getter and setter for it\r\n */\r\nexport function observableArray(prototype: Object, key: string | symbol): void;\r\n/**\r\n * Property decorator that creates hidden (shallow or deep) ko.observableArray with ES6 getter and setter for it\r\n */\r\nexport function observableArray(prototypeOrOptions: any, key?: any) {\r\n    observableArrayOption = true;\r\n    deepObservableOption = false;\r\n    if (arguments.length === 1) {\r\n        deepObservableOption = prototypeOrOptions.deep;\r\n        return observableDecorator;\r\n    }\r\n    return observableDecorator(prototypeOrOptions, key);\r\n}\r\n\r\n// observableDecorator options\r\nlet observableArrayOption: boolean;\r\nlet deepObservableOption: boolean;\r\n\r\nfunction observableDecorator(prototype: Object, propKey: string | symbol) {\r\n    let array = observableArrayOption;\r\n    let deep = deepObservableOption;\r\n    defineProperty(prototype, propKey, {\r\n        get() {\r\n            throw new Error(\"@observable property '\" + propKey.toString() + \"' was not initialized\");\r\n        },\r\n        set(this: Object, value: any) {\r\n            if (array || isArray(value)) {\r\n                defineObservableArray(this, propKey, value, deep);\r\n            } else {\r\n                defineObservableProperty(this, propKey, value, deep);\r\n            }\r\n        },\r\n    });\r\n}\r\n\r\nexport interface ObservableArray<T> extends Array<T> {\r\n    replace(oldItem: T, newItem: T): void;\r\n\r\n    remove(item: T): T[];\r\n    remove(removeFunction: (item: T) => boolean): T[];\r\n\r\n    removeAll(): T[];\r\n    removeAll(items: T[]): T[];\r\n\r\n    destroy(item: T): void;\r\n    destroy(destroyFunction: (item: T) => boolean): void;\r\n\r\n    destroyAll(): void;\r\n    destroyAll(items: T[]): void;\r\n\r\n    subscribe(callback: (val: T[]) => void): KnockoutSubscription;\r\n    subscribe(callback: (val: T[]) => void, callbackTarget: any): KnockoutSubscription;\r\n    subscribe(callback: (val: any[]) => void, callbackTarget: any, event: string): KnockoutSubscription;\r\n\r\n    /**\r\n     * Run mutator function that can write to array at some index (`array[index] = value;`)\r\n     * Then notify about observableArray changes\r\n     */\r\n    mutate(mutator: (arrayValue: T[]) => void): void;\r\n\r\n    /**\r\n     * Replace value at some index and return old value\r\n     */\r\n    set(index: number, value: T): T;\r\n}\r\n\r\n/*---------------------------------------------------------------------------*/\r\n\r\n/**\r\n * Accessor decorator that wraps ES6 getter to hidden ko.computed or ko.pureComputed\r\n *\r\n * Setter is not wrapped to hidden ko.pureComputed and stays unchanged\r\n *\r\n * But we can still extend getter @computed by extenders like { rateLimit: 500 }\r\n */\r\nexport function computed(options: { pure: boolean }): PropertyDecorator;\r\n/**\r\n * Accessor decorator that wraps ES6 getter to hidden ko.pureComputed\r\n *\r\n * Setter is not wrapped to hidden ko.pureComputed and stays unchanged\r\n *\r\n * But we can still extend getter @computed by extenders like { rateLimit: 500 }\r\n */\r\nexport function computed(prototype: Object, key: string | symbol, desc: PropertyDescriptor): PropertyDescriptor;\r\n/**\r\n * Accessor decorator that wraps ES6 getter to hidden ko.computed or ko.pureComputed\r\n *\r\n * Setter is not wrapped to hidden ko.pureComputed and stays unchanged\r\n *\r\n * But we can still extend getter @computed by extenders like { rateLimit: 500 }\r\n */\r\nexport function computed(prototypeOrOptinos: any, key?: any, propDesc?: any) {\r\n    computedDecoratorOptions = { pure: true };\r\n\r\n    if (arguments.length === 1) {\r\n        computedDecoratorOptions = prototypeOrOptinos;\r\n        return computedDecorator;\r\n    }\r\n    return computedDecorator(prototypeOrOptinos, key, propDesc);\r\n}\r\n\r\n// computedDecorator options\r\nlet computedDecoratorOptions: { pure: boolean };\r\n\r\nfunction computedDecorator(prototype: Object, propKey: string | symbol, desc: PropertyDescriptor) {\r\n    let options = computedDecoratorOptions;\r\n    const { get, set } = desc || (desc = getOwnPropertyDescriptor(prototype, propKey));\r\n    if (!get) {\r\n        throw new Error(\"@computed property '\" + propKey.toString() + \"' has no getter\");\r\n    }\r\n    desc.get = function (this: Object) {\r\n        const computed = applyExtenders(this, propKey, ko.computed(get, this, options));\r\n        defineProperty(this, propKey, {\r\n            get: computed,\r\n            // tslint:disable-next-line:object-literal-shorthand\r\n            set: set,\r\n        });\r\n        return computed();\r\n    };\r\n    return desc;\r\n}\r\n\r\n/*---------------------------------------------------------------------------*/\r\n\r\n/**\r\n * Apply extenders to decorated @observable\r\n */\r\nexport function extend(extenders: Object): PropertyDecorator;\r\n/**\r\n * Apply extenders to decorated @observable\r\n */\r\nexport function extend(extendersFactory: () => Object): PropertyDecorator;\r\n/**\r\n * Apply extenders to decorated @observable\r\n * @extendersOrFactory { Object | Function } Knockout extenders definition or factory that produces definition\r\n */\r\nexport function extend(extendersOrFactory: Object | Function) {\r\n    return function (prototype: Object, key: string | symbol) {\r\n        defineExtenders(prototype, key, extendersOrFactory);\r\n    };\r\n}\r\n\r\n/*---------------------------------------------------------------------------*/\r\n\r\nexport interface ComponentConstructor {\r\n    new (\r\n        params?: any,\r\n        element?: Node,\r\n        templateNodes?: Node[],\r\n    ): any;\r\n}\r\n\r\nexport type ComponentDecorator = (constructor: ComponentConstructor) => void;\r\n\r\nexport type TemplateConfig = (\r\n    string\r\n    | Node[]\r\n    | DocumentFragment\r\n    | { require: string }\r\n    | { element: string | Node }\r\n);\r\n\r\n/**\r\n * Register Knockout component by decorating ViewModel class\r\n */\r\nexport function component(\r\n    name: string,\r\n    options?: Object,\r\n): ComponentDecorator;\r\n/**\r\n * Register Knockout component by decorating ViewModel class\r\n */\r\nexport function component(\r\n    name: string,\r\n    template: TemplateConfig,\r\n    options?: Object,\r\n): ComponentDecorator;\r\n/**\r\n * Register Knockout component by decorating ViewModel class\r\n */\r\nexport function component(\r\n    name: string,\r\n    template: TemplateConfig,\r\n    styles: string | string[],\r\n    options?: Object,\r\n): ComponentDecorator;\r\n/**\r\n * Register Knockout component by decorating ViewModel class\r\n * @param name {String} Name of component\r\n * @param template {Any} Knockout template definition\r\n * @param styles {Any} Ignored parameter (used for `require()` styles by webpack etc.)\r\n * @param options {Object} Another options that passed directly to `ko.components.register()`\r\n */\r\nexport function component(\r\n    name: string,\r\n    template?: any,\r\n    styles?: any,\r\n    options?: Object,\r\n) {\r\n    if (options === void 0) {\r\n        if (styles === void 0) {\r\n            if (typeof template === \"object\"\r\n                && template.constructor === Object\r\n                && !(\"require\" in template)\r\n                && !(\"element\" in template)\r\n            ) {\r\n                options = template;\r\n                template = void 0;\r\n            }\r\n        } else if (typeof styles === \"object\") {\r\n            options = styles;\r\n            styles = void 0;\r\n        }\r\n    }\r\n\r\n    return function (constructor: ComponentConstructor) {\r\n        ko.components.register(name, extendObject({\r\n            viewModel: constructor.length < 2 ? constructor : {\r\n                createViewModel(params: any, {\r\n                    element, templateNodes,\r\n                }: {\r\n                        element: Node, templateNodes: Node[],\r\n                    }) {\r\n                    return new constructor(params, element, templateNodes);\r\n                },\r\n            },\r\n            template: template || \"<!---->\",\r\n            synchronous: true,\r\n        }, options as Object));\r\n    };\r\n}\r\n\r\n/*---------------------------------------------------------------------------*/\r\n\r\n/**\r\n * Like https://github.com/jayphelps/core-decorators.js @autobind but less smart and complex\r\n * Do NOT use with ES6 inheritance!\r\n */\r\nexport function autobind(prototype: Object, key: string | symbol, desc: PropertyDescriptor) {\r\n    const { value, configurable, enumerable } = desc || (desc = getOwnPropertyDescriptor(prototype, key));\r\n    return {\r\n        // tslint:disable-next-line:object-literal-shorthand\r\n        configurable: configurable,\r\n        // tslint:disable-next-line:object-literal-shorthand\r\n        enumerable: enumerable,\r\n        get(this: Object) {\r\n            if (this === prototype) {\r\n                return value;\r\n            }\r\n            const bound = value.bind(this);\r\n            defineProperty(this, key, {\r\n                value: bound,\r\n            });\r\n            return bound;\r\n        },\r\n    } as PropertyDescriptor;\r\n}\r\n\r\n/*---------------------------------------------------------------------------*/\r\n\r\n/**\r\n * Define hidden ko.subscribable, that notifies subscribers when decorated method is invoked\r\n */\r\nexport function event(prototype: Object, key: string | symbol) {\r\n    defineProperty(prototype, key, {\r\n        get(this: Object) {\r\n            return defineEventProperty(this, key);\r\n        },\r\n    });\r\n}\r\n\r\nexport type EventType = Function & {\r\n    subscribe(callback: Function): KnockoutSubscription;\r\n};\r\n\r\n/*---------------------------------------------------------------------------*/\r\n\r\n/**\r\n * Subscribe callback to `@observable` or `@computed` dependency changes or to some `@event` property\r\n */\r\nexport function subscribe<T>(\r\n    dependencyOrEvent: () => T,\r\n    callback: (value: T) => void,\r\n    options?: { once?: boolean, event?: \"change\" | \"beforeChange\" },\r\n): KnockoutSubscription;\r\n/**\r\n * Subscribe callback to `@observableArray` dependency \"arrayChange\" event\r\n */\r\nexport function subscribe<T>(\r\n    dependency: () => T[],\r\n    callback: (value: {\r\n        status: \"added\" | \"deleted\";\r\n        value: T;\r\n        index: number;\r\n    }[]) => void,\r\n    options: { once?: boolean, event: \"arrayChange\" },\r\n): KnockoutSubscription;\r\n/**\r\n * Subscribe callback to some `@event` property\r\n */\r\nexport function subscribe<T>(\r\n    event: (arg: T) => void,\r\n    callback: (arg: T) => void,\r\n    options?: { once?: boolean },\r\n): KnockoutSubscription;\r\n/**\r\n * Subscribe callback to some `@event` property\r\n */\r\nexport function subscribe<T1, T2>(\r\n    event: (arg1: T1, arg2: T2) => void,\r\n    callback: (arg1: T1, arg2: T2) => void,\r\n    options?: { once?: boolean },\r\n): KnockoutSubscription;\r\n/**\r\n * Subscribe callback to some `@event` property\r\n */\r\nexport function subscribe<T1, T2, T3>(\r\n    event: (arg1: T1, arg2: T2, arg3: T3, ...args: any[]) => void,\r\n    callback: (arg1: T1, arg2: T2, arg3: T3, ...args: any[]) => void,\r\n    options?: { once?: boolean },\r\n): KnockoutSubscription;\r\n/**\r\n * Subscribe callback to `@observable` or `@computed` dependency changes or to some `@event`\r\n */\r\nexport function subscribe(\r\n    dependencyOrEvent: Function,\r\n    callback: (...args: any[]) => void,\r\n    options?: { once?: boolean, event?: \"change\" | \"beforeChange\" | \"arrayChange\" },\r\n) {\r\n    const once = options && options.once || false;\r\n\r\n    if (hasOwnProperty(dependencyOrEvent, \"subscribe\")) {\r\n        // overload: subscribe to @event property\r\n        const event = dependencyOrEvent as EventType;\r\n\r\n        if (once) {\r\n            const subscription = event.subscribe(function () {\r\n                subscription.dispose();\r\n                callback.apply(null, arguments);\r\n            });\r\n            return subscription;\r\n        } else {\r\n            return event.subscribe(callback);\r\n        }\r\n    } else {\r\n        // overload: subscribe to @observable or @computed\r\n        const event = options && options.event || \"change\";\r\n\r\n        let handler: (value: any) => void;\r\n        let subscription: KnockoutSubscription;\r\n\r\n        if (once) {\r\n            handler = function () {\r\n                subscription.dispose();\r\n                callback.apply(null, arguments);\r\n            };\r\n        } else {\r\n            handler = callback;\r\n        }\r\n\r\n        if (event === \"arrayChange\") {\r\n            const obsArray = dependencyOrEvent() as ObservableArray<any>;\r\n\r\n            if (isArray(obsArray) && hasOwnProperty(obsArray, PATCHED_KEY)) {\r\n                subscription = obsArray.subscribe(handler, null, event);\r\n            } else {\r\n                throw new Error(\"Can not subscribe to 'arrayChange' because dependency is not an 'observableArray'\");\r\n            }\r\n        } else {\r\n            const computed = ko.computed(dependencyOrEvent as () => any);\r\n\r\n            subscription = computed.subscribe(handler, null, event);\r\n\r\n            const originalDispose = subscription.dispose;\r\n            // dispose hidden computed with subscription\r\n            subscription.dispose = function (this: KnockoutSubscription) {\r\n                originalDispose.call(this);\r\n                computed.dispose();\r\n            };\r\n        }\r\n        return subscription;\r\n    }\r\n}\r\n\r\n/*---------------------------------------------------------------------------*/\r\n\r\n/**\r\n * Get internal ko.observable() for object property decodated by @observable\r\n */\r\nexport function unwrap(instance: Object, key: string | symbol): any;\r\n/**\r\n * Get internal ko.observable() for object property decodated by @observable\r\n */\r\nexport function unwrap<T>(instance: Object, key: string | symbol): KnockoutObservable<T>;\r\n/**\r\n * Get internal ko.observable() for object property decodated by @observable\r\n */\r\nexport function unwrap(instance: Object, key: string | symbol) {\r\n    if (!hasOwnProperty(instance, key)) {\r\n        // invoke getter on instance.__proto__ that defines property on instance\r\n        // tslint:disable-next-line:no-unused-expression\r\n        instance[key];\r\n    }\r\n    return getOwnPropertyDescriptor(instance, key).get;\r\n}\r\n\r\n/*---------------------------------------------------------------------------*/\r\n/**\r\n * Mixin which add `subscribe()` instance method and implement `dispose()` method,\r\n * that disposes all subscription created by `subscribe()`\r\n */\r\nexport interface Disposable {\r\n    /** Dispose all subscriptions from this class */\r\n    dispose(): void;\r\n\r\n    /** Subscribe callback to `@observable` or `@computed` dependency changes or to some `@event` property */\r\n    subscribe<T>(\r\n        dependencyOrEvent: () => T,\r\n        callback: (value: T) => void,\r\n        options?: { once?: boolean, event?: \"change\" | \"beforeChange\" },\r\n    ): KnockoutSubscription;\r\n    /** Subscribe callback to `@observableArray` dependency \"arrayChange\" event */\r\n    subscribe<T>(\r\n        dependency: () => T[],\r\n        callback: (value: {\r\n            status: \"added\" | \"deleted\";\r\n            value: T;\r\n            index: number;\r\n        }[]) => void,\r\n        options: { once?: boolean, event: \"arrayChange\" },\r\n    ): KnockoutSubscription;\r\n    /** Subscribe callback to some `@event` property */\r\n    subscribe<T>(\r\n        event: (arg: T) => void,\r\n        callback: (arg: T) => void,\r\n        options?: { once?: boolean },\r\n    ): KnockoutSubscription;\r\n    /** Subscribe callback to some `@event` property */\r\n    subscribe<T1, T2>(\r\n        event: (arg1: T1, arg2: T2) => void,\r\n        callback: (arg1: T1, arg2: T2) => void,\r\n        options?: { once?: boolean },\r\n    ): KnockoutSubscription;\r\n    /** Subscribe callback to some `@event` property */\r\n    subscribe<T1, T2, T3>(\r\n        event: (arg1: T1, arg2: T2, arg3: T3, ...args: any[]) => void,\r\n        callback: (arg1: T1, arg2: T2, arg3: T3, ...args: any[]) => void,\r\n        options?: { once?: boolean },\r\n    ): KnockoutSubscription;\r\n\r\n    /** Get internal ko.observable() for class property decodated by `@observable` */\r\n    unwrap(key: string | symbol): any;\r\n    /** Get internal ko.observable() for class property decodated by `@observable` */\r\n    unwrap<T>(key: string | symbol): KnockoutObservable<T>;\r\n}\r\n\r\n/**\r\n * Mixin which add `subscribe()` instance method and implement `dispose()` method,\r\n * that disposes all subscription created by `subscribe()`\r\n * @param Base {Function} Base class to extend\r\n */\r\nexport function Disposable<T extends new (...args: any[]) => {}>(\r\n    // tslint:disable-next-line:variable-name\r\n    Base?: T,\r\n): (new (...args: any[]) => Disposable) & T {\r\n    if (typeof Base === \"undefined\") {\r\n        Base = class { } as T;\r\n    }\r\n    return class extends Base {\r\n        constructor(...args: any[]) {\r\n            super(...args);\r\n        }\r\n\r\n        /** Dispose all subscriptions from this class */\r\n        dispose() {\r\n            const subscriptions: KnockoutSubscription[] = this[SUBSCRIPTIONS_KEY];\r\n            if (subscriptions) {\r\n                subscriptions.forEach((subscription) => {\r\n                    subscription.dispose();\r\n                });\r\n                delete this[SUBSCRIPTIONS_KEY];\r\n            }\r\n        }\r\n\r\n        /** Subscribe callback to `@observable` or `@computed` dependency changes or to some `@event` */\r\n        subscribe() {\r\n            const subscription: KnockoutSubscription = subscribe.apply(null, arguments);\r\n            const subscriptions: KnockoutSubscription[] = this[SUBSCRIPTIONS_KEY] || (this[SUBSCRIPTIONS_KEY] = []);\r\n            subscriptions.push(subscription);\r\n            return subscription;\r\n        }\r\n\r\n        /** Get internal ko.observable() for class property decodated by `@observable` */\r\n        unwrap(key: string) {\r\n            return unwrap(this, key);\r\n        }\r\n    };\r\n}\r\n"],"names":["instance","key","descriptor","configurable","Object","defineProperty","subscribable","ko.subscribable","event","eventArgs","arraySlice","arguments","notifySubscribers","subscribe","callback","apply","value","target","dictionary","EXTENDERS_KEY","extenders","forEach","extender","koExtender","Function","call","extend","prototype","extendersOrFactory","hasOwnProperty","extendObject","objectForEach","existingKey","push","deep","observable","applyExtenders","ko.observable","setter","newValue","prepareDeepValue","enumerable","get","set","isArray","getPrototypeOf","prepareDeepObject","constructor","PATCHED_KEY","defineObservableArray","defineObservableProperty","lastValue","obsArray","peek","allMethods","fnName","i","length","patchArrayMethods","insideObsArray","array","deepArrayMethods","allArrayMethods","ArrayPrototype","result","deepObservableArrayMethods","allObservableArrayMethods","args","unshift","splice","oldItem","newItem","replace","mutator","nativeArray","valueWillMutate","valueHasMutated","index","ko.observableArray","prototypeOrOptions","observableArrayOption","deepObservableOption","observableDecorator","propKey","Error","toString","this","prototypeOrOptinos","propDesc","computedDecoratorOptions","pure","computedDecorator","desc","options","_a","computed","ko.computed","defineExtenders","name","template","styles","ko.components","register","viewModel","createViewModel","params","element","templateNodes","synchronous","bound","bind","defineEventProperty","dependencyOrEvent","once","event_1","subscription_1","dispose","subscription_2","event_2","handler","computed_1","originalDispose_1","getOwnPropertyDescriptor","Base","_i","__extends","class_2","subscriptions","SUBSCRIPTIONS_KEY","subscription","unwrap","prefix","Symbol","Array","ko.utils","slice"],"mappings":"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"}