{"version":3,"file":"knockout-decorators.min.js","sources":["../src/common-functions.ts","../src/property-extenders.ts","../src/observable-property.ts","../src/observable-array.ts","../src/knockout-decorators.ts","../src/event-property.ts"],"sourcesContent":["/**\r\n * Copyright (c) 2016-2017 Dmitry Panyushkin\r\n * Available under MIT license\r\n */\r\nimport * as ko from \"knockout\";\r\n\r\nconst prefix = \"__ko_decorators_\";\r\n\r\nexport let PATCHED_KEY: string | symbol = prefix + \"patched__\";\r\nexport let EXTENDERS_KEY: string | symbol = prefix + \"extenders__\";\r\nexport let SUBSCRIPTIONS_KEY: string | symbol = prefix + \"subscriptions__\";\r\n\r\nif (typeof Symbol !== \"undefined\") {\r\n    PATCHED_KEY = Symbol(PATCHED_KEY);\r\n    EXTENDERS_KEY = Symbol(EXTENDERS_KEY);\r\n    SUBSCRIPTIONS_KEY = Symbol(SUBSCRIPTIONS_KEY);\r\n}\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const ArrayPrototype = Array.prototype;\r\n\r\nexport function defineProperty(instance: Object, key: any, descriptor: PropertyDescriptor) {\r\n    descriptor.configurable = true;\r\n    Object.defineProperty(instance, key, descriptor);\r\n}\r\n\r\nexport const extendObject = ko.utils.extend;\r\nexport const objectForEach = ko.utils.objectForEach;\r\nexport const isArray = Array.isArray.bind(Array);\r\nexport const getPrototypeOf = Object.getPrototypeOf.bind(Object);\r\nexport const getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor.bind(Object);\r\nexport const hasOwnProperty = Function.prototype.call.bind(Object.prototype.hasOwnProperty);\r\nexport const arraySlice = Function.prototype.call.bind(ArrayPrototype.slice);\r\n","/**\r\n * Copyright (c) 2016-2017 Dmitry Panyushkin\r\n * Available under MIT license\r\n */\r\nimport { EXTENDERS_KEY, extendObject, hasOwnProperty, objectForEach } from \"./common-functions\";\r\n\r\ntype Extender = Object | Function;\r\n\r\ninterface ExtendersDictionary {\r\n    [propName: string]: Extender[];\r\n}\r\n\r\nexport function applyExtenders(\r\n    instance: Object, key: string | symbol,\r\n    target: KnockoutObservable<any> | KnockoutComputed<any>,\r\n) {\r\n    const dictionary = instance[EXTENDERS_KEY] as ExtendersDictionary;\r\n    const extenders = dictionary && dictionary[key];\r\n    if (extenders) {\r\n        extenders.forEach((extender) => {\r\n            const koExtender = extender instanceof Function\r\n                ? extender.call(instance) : extender;\r\n\r\n            target = target.extend(koExtender);\r\n        });\r\n    }\r\n    return target;\r\n}\r\n\r\nexport function defineExtenders(\r\n    prototype: Object, key: string | symbol,\r\n    extendersOrFactory: Object | Function,\r\n) {\r\n    let dictionary = prototype[EXTENDERS_KEY] as ExtendersDictionary;\r\n    // if there is no ExtendersDictionary or ExtendersDictionary lives in base class prototype\r\n    if (!hasOwnProperty(prototype, EXTENDERS_KEY)) {\r\n        // clone ExtendersDictionary from base class prototype or create new ExtendersDictionary\r\n        prototype[EXTENDERS_KEY] = dictionary = extendObject({}, dictionary) as ExtendersDictionary;\r\n        // clone Extenders arrays for each property key\r\n        objectForEach(dictionary, (existingKey, extenders) => {\r\n            dictionary[existingKey] = [...extenders];\r\n        });\r\n    }\r\n    // get existing Extenders array or create new array\r\n    const extenders = dictionary[key] || (dictionary[key] = []);\r\n    // add new Extenders\r\n    extenders.push(extendersOrFactory);\r\n}\r\n","/**\r\n * Copyright (c) 2016-2017 Dmitry Panyushkin\r\n * Available under MIT license\r\n */\r\nimport * as ko from \"knockout\";\r\nimport {\r\n    defineProperty, getPrototypeOf, hasOwnProperty, isArray, objectForEach, PATCHED_KEY,\r\n} from \"./common-functions\";\r\nimport { defineObservableArray } from \"./observable-array\";\r\nimport { applyExtenders } from \"./property-extenders\";\r\n\r\nexport function defineObservableProperty(\r\n    instance: Object, key: string | symbol, value: any, deep: boolean,\r\n) {\r\n    const observable = applyExtenders(instance, key, ko.observable());\r\n\r\n    let setter = observable as any;\r\n\r\n    if (deep) {\r\n        setter = function (newValue: any) {\r\n            observable(prepareDeepValue(newValue));\r\n        };\r\n    }\r\n\r\n    defineProperty(instance, key, {\r\n        enumerable: true,\r\n        get: observable,\r\n        set: setter,\r\n    });\r\n\r\n    setter(value);\r\n}\r\n\r\nexport function prepareDeepValue(value: any) {\r\n    if (typeof value === \"object\") {\r\n        if (isArray(value) || value === null) {\r\n            // value is Array or null\r\n            return value;\r\n        } else if (hasOwnProperty(value, \"constructor\")) {\r\n            // there is redefined own property \"constructor\"\r\n            const prototype = getPrototypeOf(value);\r\n            if (prototype === Object.prototype || prototype === null) {\r\n                // value is plain Object\r\n                return prepareDeepObject(value);\r\n            }\r\n        } else if (value.constructor === Object) {\r\n            // value is plain Object\r\n            return prepareDeepObject(value);\r\n        }\r\n    }\r\n    // value is primitive, function or class instance\r\n    return value;\r\n}\r\n\r\nexport function prepareDeepObject(instance: Object) {\r\n    if (!hasOwnProperty(instance, PATCHED_KEY)) {\r\n        // mark instance as ObservableObject\r\n        defineProperty(instance, PATCHED_KEY, {\r\n            value: true,\r\n        });\r\n        // define deep observable properties\r\n        objectForEach(instance, (key, value) => {\r\n            if (isArray(value)) {\r\n                defineObservableArray(instance, key, value, true);\r\n            } else {\r\n                defineObservableProperty(instance, key, value, true);\r\n            }\r\n        });\r\n    }\r\n    return instance;\r\n}\r\n","/**\r\n * Copyright (c) 2016-2017 Dmitry Panyushkin\r\n * Available under MIT license\r\n */\r\nimport * as ko from \"knockout\";\r\nimport { ArrayPrototype, arraySlice, defineProperty, hasOwnProperty, isArray, PATCHED_KEY } from \"./common-functions\";\r\nimport { prepareDeepValue } from \"./observable-property\";\r\nimport { applyExtenders } from \"./property-extenders\";\r\n\r\ntype ObsArray = KnockoutObservableArray<any> & { [fnName: string]: Function };\r\n\r\nconst deepArrayMethods = [\"pop\", \"reverse\", \"shift\", \"sort\"];\r\nconst allArrayMethods = [...deepArrayMethods, \"push\", \"splice\", \"unshift\"];\r\n\r\nconst deepObservableArrayMethods = [\"remove\", \"removeAll\", \"destroy\", \"destroyAll\", \"replace\", \"subscribe\"];\r\nconst allObservableArrayMethods = [...deepObservableArrayMethods, \"replace\"];\r\n\r\nconst allMethods = [...allArrayMethods, ...allObservableArrayMethods, \"mutate\", \"set\"];\r\n\r\nexport function defineObservableArray(\r\n    instance: Object, key: string | symbol, value: any[], deep: boolean,\r\n) {\r\n    const obsArray = applyExtenders(instance, key, ko.observableArray()) as ObsArray;\r\n\r\n    let insideObsArray = false;\r\n\r\n    defineProperty(instance, key, {\r\n        enumerable: true,\r\n        get: obsArray,\r\n        set: setter,\r\n    });\r\n\r\n    setter(value);\r\n\r\n    function setter(newValue: any[]) {\r\n        const lastValue = obsArray.peek();\r\n        // if we got new value\r\n        if (lastValue !== newValue) {\r\n            if (isArray(lastValue)) {\r\n                // if lastValue array methods were already patched\r\n                if (hasOwnProperty(lastValue, PATCHED_KEY)) {\r\n                    delete lastValue[PATCHED_KEY];\r\n                    // clear patched array methods on lastValue (see unit tests)\r\n                    allMethods.forEach((fnName) => {\r\n                        delete lastValue[fnName];\r\n                    });\r\n                }\r\n            }\r\n            if (isArray(newValue)) {\r\n                // if new value array methods were already connected with another @observable\r\n                if (hasOwnProperty(newValue, PATCHED_KEY)) {\r\n                    // clone new value to prevent corruption of another @observable (see unit tests)\r\n                    newValue = [...newValue];\r\n                }\r\n                // if deep option is set\r\n                if (deep) {\r\n                    // make all array items deep observable\r\n                    for (let i = 0; i < newValue.length; ++i) {\r\n                        newValue[i] = prepareDeepValue(newValue[i]);\r\n                    }\r\n                }\r\n                // mark instance as ObservableArray\r\n                defineProperty(newValue, PATCHED_KEY, {\r\n                    value: true,\r\n                });\r\n                // call ko.observableArray.fn[fnName] instead of Array.prototype[fnName]\r\n                patchArrayMethods(newValue);\r\n            }\r\n        }\r\n        // update obsArray contents\r\n        insideObsArray = true;\r\n        obsArray(newValue);\r\n        insideObsArray = false;\r\n    }\r\n\r\n    function patchArrayMethods(array: any[]) {\r\n        const arrayMethods = deep ? deepArrayMethods : allArrayMethods;\r\n\r\n        arrayMethods.forEach((fnName) => defineProperty(array, fnName, {\r\n            value() {\r\n                if (insideObsArray) {\r\n                    return ArrayPrototype[fnName].apply(array, arguments);\r\n                }\r\n                insideObsArray = true;\r\n                const result = obsArray[fnName].apply(obsArray, arguments);\r\n                insideObsArray = false;\r\n                return result;\r\n            },\r\n        }));\r\n\r\n        const observableArrayMethods = deep ? deepObservableArrayMethods : allObservableArrayMethods;\r\n\r\n        observableArrayMethods.forEach((fnName) => defineProperty(array, fnName, {\r\n            value() {\r\n                insideObsArray = true;\r\n                const result = obsArray[fnName].apply(obsArray, arguments);\r\n                insideObsArray = false;\r\n                return result;\r\n            },\r\n        }));\r\n\r\n        if (deep) {\r\n            defineProperty(array, \"push\", {\r\n                value() {\r\n                    if (insideObsArray) {\r\n                        return ArrayPrototype.push.apply(array, arguments);\r\n                    }\r\n                    const args = arraySlice(arguments);\r\n                    for (let i = 0; i < args.length; ++i) {\r\n                        args[i] = prepareDeepValue(args[i]);\r\n                    }\r\n                    insideObsArray = true;\r\n                    const result = obsArray.push.apply(obsArray, args);\r\n                    insideObsArray = false;\r\n                    return result;\r\n                },\r\n            });\r\n\r\n            defineProperty(array, \"unshift\", {\r\n                value() {\r\n                    if (insideObsArray) {\r\n                        return ArrayPrototype.unshift.apply(array, arguments);\r\n                    }\r\n                    const args = arraySlice(arguments);\r\n                    for (let i = 0; i < args.length; ++i) {\r\n                        args[i] = prepareDeepValue(args[i]);\r\n                    }\r\n                    insideObsArray = true;\r\n                    const result = obsArray.unshift.apply(obsArray, args);\r\n                    insideObsArray = false;\r\n                    return result;\r\n                },\r\n            });\r\n\r\n            defineProperty(array, \"splice\", {\r\n                value() {\r\n                    if (insideObsArray) {\r\n                        return ArrayPrototype.splice.apply(array, arguments);\r\n                    }\r\n\r\n                    let result: any[];\r\n\r\n                    insideObsArray = true;\r\n                    switch (arguments.length) {\r\n                        case 0:\r\n                        case 1:\r\n                        case 2: {\r\n                            result = obsArray.splice.apply(obsArray, arguments);\r\n                            break;\r\n                        }\r\n                        case 3: {\r\n                            result = obsArray.splice(\r\n                                arguments[0], arguments[1], prepareDeepValue(arguments[2]),\r\n                            );\r\n                            break;\r\n                        }\r\n                        default: {\r\n                            const args = arraySlice(arguments);\r\n                            for (let i = 2; i < args.length; ++i) {\r\n                                args[i] = prepareDeepValue(args[i]);\r\n                            }\r\n                            result = obsArray.splice.apply(obsArray, arguments);\r\n                            break;\r\n                        }\r\n                    }\r\n                    insideObsArray = false;\r\n\r\n                    return result;\r\n                },\r\n            });\r\n\r\n            defineProperty(array, \"replace\", {\r\n                value(oldItem: any, newItem: any) {\r\n                    insideObsArray = true;\r\n                    const result = obsArray.replace(oldItem, prepareDeepValue(newItem));\r\n                    insideObsArray = false;\r\n                    return result;\r\n                },\r\n            });\r\n\r\n            defineProperty(array, \"mutate\", {\r\n                value(mutator: (array?: any[]) => void) {\r\n                    const nativeArray = obsArray.peek();\r\n                    // it is defined for ko.observableArray\r\n                    (obsArray.valueWillMutate as Function)();\r\n                    mutator(nativeArray);\r\n                    for (let i = 0; i < nativeArray.length; ++i) {\r\n                        nativeArray[i] = prepareDeepValue(nativeArray[i]);\r\n                    }\r\n                    // it is defined for ko.observableArray\r\n                    (obsArray.valueHasMutated as Function)();\r\n                },\r\n            });\r\n\r\n            defineProperty(array, \"set\", {\r\n                value(index: number, newItem: any) {\r\n                    return obsArray.splice(index, 1, prepareDeepValue(newItem))[0];\r\n                },\r\n            });\r\n        } else {\r\n            defineProperty(array, \"mutate\", {\r\n                value(mutator: (array?: any[]) => void) {\r\n                    // it is defined for ko.observableArray\r\n                    (obsArray.valueWillMutate as Function)();\r\n                    mutator(obsArray.peek());\r\n                    // it is defined for ko.observableArray\r\n                    (obsArray.valueHasMutated as Function)();\r\n                },\r\n            });\r\n\r\n            defineProperty(array, \"set\", {\r\n                value(index: number, newItem: any) {\r\n                    return obsArray.splice(index, 1, newItem)[0];\r\n                },\r\n            });\r\n        }\r\n    }\r\n}\r\n","/**\r\n * Copyright (c) 2016-2017 Dmitry Panyushkin\r\n * Available under MIT license\r\n * Version: 1.0.1\r\n */\r\nimport * as ko from \"knockout\";\r\nimport {\r\n    defineProperty, extendObject, getOwnPropertyDescriptor, hasOwnProperty, isArray, PATCHED_KEY, SUBSCRIPTIONS_KEY,\r\n} from \"./common-functions\";\r\nimport { defineEventProperty } from \"./event-property\";\r\nimport { defineObservableArray } from \"./observable-array\";\r\nimport { defineObservableProperty } from \"./observable-property\";\r\nimport { applyExtenders, defineExtenders } from \"./property-extenders\";\r\n\r\n/**\r\n * Property decorator that creates hidden (shallow or deep) ko.observable with ES6 getter and setter for it\r\n * If initialized by Array then hidden ko.observableArray will be created\r\n */\r\nexport function observable(options: { deep: boolean }): PropertyDecorator;\r\n/**\r\n * Property decorator that creates hidden (shallow) ko.observable with ES6 getter and setter for it\r\n * If initialized by Array then hidden (shallow) ko.observableArray will be created\r\n */\r\nexport function observable(prototype: Object, key: string | symbol): void;\r\n/**\r\n * Property decorator that creates hidden (shallow or deep) ko.observable with ES6 getter and setter for it\r\n * If initialized by Array then hidden (shallow or deep) ko.observableArray will be created\r\n */\r\nexport function observable(prototypeOrOptions: any, key?: any) {\r\n    observableArrayOption = false;\r\n    deepObservableOption = false;\r\n    if (arguments.length === 1) {\r\n        deepObservableOption = prototypeOrOptions.deep;\r\n        return observableDecorator;\r\n    }\r\n    return observableDecorator(prototypeOrOptions, key);\r\n}\r\n\r\n/**\r\n * Property decorator that creates hidden (shallow or deep) ko.observableArray with ES6 getter and setter for it\r\n */\r\nexport function observableArray(options: { deep: boolean }): PropertyDecorator;\r\n/**\r\n * Property decorator that creates hidden (shallow) ko.observableArray with ES6 getter and setter for it\r\n */\r\nexport function observableArray(prototype: Object, key: string | symbol): void;\r\n/**\r\n * Property decorator that creates hidden (shallow or deep) ko.observableArray with ES6 getter and setter for it\r\n */\r\nexport function observableArray(prototypeOrOptions: any, key?: any) {\r\n    observableArrayOption = true;\r\n    deepObservableOption = false;\r\n    if (arguments.length === 1) {\r\n        deepObservableOption = prototypeOrOptions.deep;\r\n        return observableDecorator;\r\n    }\r\n    return observableDecorator(prototypeOrOptions, key);\r\n}\r\n\r\n// observableDecorator options\r\nlet observableArrayOption: boolean;\r\nlet deepObservableOption: boolean;\r\n\r\nfunction observableDecorator(prototype: Object, propKey: string | symbol) {\r\n    const array = observableArrayOption;\r\n    const deep = deepObservableOption;\r\n    defineProperty(prototype, propKey, {\r\n        get() {\r\n            throw new Error(\"@observable property '\" + propKey.toString() + \"' was not initialized\");\r\n        },\r\n        set(this: Object, value: any) {\r\n            if (array || isArray(value)) {\r\n                defineObservableArray(this, propKey, value, deep);\r\n            } else {\r\n                defineObservableProperty(this, propKey, value, deep);\r\n            }\r\n        },\r\n    });\r\n}\r\n\r\nexport interface ObservableArray<T> extends Array<T> {\r\n    replace(oldItem: T, newItem: T): void;\r\n\r\n    remove(item: T): T[];\r\n    remove(removeFunction: (item: T) => boolean): T[];\r\n\r\n    removeAll(): T[];\r\n    removeAll(items: T[]): T[];\r\n\r\n    destroy(item: T): void;\r\n    destroy(destroyFunction: (item: T) => boolean): void;\r\n\r\n    destroyAll(): void;\r\n    destroyAll(items: T[]): void;\r\n\r\n    subscribe(callback: (val: T[]) => void): KnockoutSubscription;\r\n    subscribe(callback: (val: T[]) => void, callbackTarget: any): KnockoutSubscription;\r\n    subscribe(callback: (val: any[]) => void, callbackTarget: any, event: string): KnockoutSubscription;\r\n\r\n    /**\r\n     * Run mutator function that can write to array at some index (`array[index] = value;`)\r\n     * Then notify about observableArray changes\r\n     */\r\n    mutate(mutator: (arrayValue: T[]) => void): void;\r\n\r\n    /**\r\n     * Replace value at some index and return old value\r\n     */\r\n    set(index: number, value: T): T;\r\n}\r\n\r\n/*---------------------------------------------------------------------------*/\r\n\r\n/**\r\n * Accessor decorator that wraps ES6 getter to hidden ko.computed or ko.pureComputed\r\n *\r\n * Setter is not wrapped to hidden ko.pureComputed and stays unchanged\r\n *\r\n * But we can still extend getter @computed by extenders like { rateLimit: 500 }\r\n */\r\nexport function computed(options: { pure: boolean }): PropertyDecorator;\r\n/**\r\n * Accessor decorator that wraps ES6 getter to hidden ko.pureComputed\r\n *\r\n * Setter is not wrapped to hidden ko.pureComputed and stays unchanged\r\n *\r\n * But we can still extend getter @computed by extenders like { rateLimit: 500 }\r\n */\r\nexport function computed(prototype: Object, key: string | symbol, desc: PropertyDescriptor): PropertyDescriptor;\r\n/**\r\n * Accessor decorator that wraps ES6 getter to hidden ko.computed or ko.pureComputed\r\n *\r\n * Setter is not wrapped to hidden ko.pureComputed and stays unchanged\r\n *\r\n * But we can still extend getter @computed by extenders like { rateLimit: 500 }\r\n */\r\nexport function computed(prototypeOrOptinos: any, key?: any, propDesc?: any): any {\r\n    computedDecoratorOptions = { pure: true };\r\n\r\n    if (arguments.length === 1) {\r\n        computedDecoratorOptions = prototypeOrOptinos;\r\n        return computedDecorator;\r\n    }\r\n    return computedDecorator(prototypeOrOptinos, key, propDesc);\r\n}\r\n\r\n// computedDecorator options\r\nlet computedDecoratorOptions: { pure: boolean };\r\n\r\nfunction computedDecorator(prototype: Object, propKey: string | symbol, desc: PropertyDescriptor) {\r\n    const options = computedDecoratorOptions;\r\n    const { get, set } = desc || (desc = getOwnPropertyDescriptor(prototype, propKey));\r\n    if (!get) {\r\n        throw new Error(\"@computed property '\" + propKey.toString() + \"' has no getter\");\r\n    }\r\n    desc.get = function (this: Object) {\r\n        const computed = applyExtenders(this, propKey, ko.computed(get, this, options));\r\n        defineProperty(this, propKey, {\r\n            get: computed,\r\n            // tslint:disable-next-line:object-literal-shorthand\r\n            set: set,\r\n        });\r\n        return computed();\r\n    };\r\n    return desc;\r\n}\r\n\r\n/*---------------------------------------------------------------------------*/\r\n\r\n/**\r\n * Apply extenders to decorated @observable\r\n */\r\nexport function extend(extenders: Object): PropertyDecorator;\r\n/**\r\n * Apply extenders to decorated @observable\r\n */\r\nexport function extend(extendersFactory: () => Object): PropertyDecorator;\r\n/**\r\n * Apply extenders to decorated @observable\r\n * @extendersOrFactory { Object | Function } Knockout extenders definition or factory that produces definition\r\n */\r\nexport function extend(extendersOrFactory: Object | Function) {\r\n    return function (prototype: Object, key: string | symbol) {\r\n        defineExtenders(prototype, key, extendersOrFactory);\r\n    };\r\n}\r\n\r\n/*---------------------------------------------------------------------------*/\r\n\r\nexport type ComponentConstructor = new (\r\n    params?: any,\r\n    element?: Node,\r\n    templateNodes?: Node[],\r\n) => any;\r\n\r\nexport type ComponentDecorator = (constructor: ComponentConstructor) => void;\r\n\r\nexport type TemplateConfig = (\r\n    string\r\n    | Node[]\r\n    | DocumentFragment\r\n    | { require: string }\r\n    | { element: string | Node }\r\n);\r\n\r\n/**\r\n * Register Knockout component by decorating ViewModel class\r\n */\r\nexport function component(\r\n    name: string,\r\n    options?: Object,\r\n): ComponentDecorator;\r\n/**\r\n * Register Knockout component by decorating ViewModel class\r\n */\r\nexport function component(\r\n    name: string,\r\n    template: TemplateConfig,\r\n    options?: Object,\r\n): ComponentDecorator;\r\n/**\r\n * Register Knockout component by decorating ViewModel class\r\n */\r\nexport function component(\r\n    name: string,\r\n    template: TemplateConfig,\r\n    styles: string | string[],\r\n    options?: Object,\r\n): ComponentDecorator;\r\n/**\r\n * Register Knockout component by decorating ViewModel class\r\n * @param name {String} Name of component\r\n * @param template {Any} Knockout template definition\r\n * @param styles {Any} Ignored parameter (used for `require()` styles by webpack etc.)\r\n * @param options {Object} Another options that passed directly to `ko.components.register()`\r\n */\r\nexport function component(\r\n    name: string,\r\n    template?: any,\r\n    styles?: any,\r\n    options?: Object,\r\n) {\r\n    if (options === void 0) {\r\n        if (styles === void 0) {\r\n            if (typeof template === \"object\"\r\n                && template.constructor === Object\r\n                && !(\"require\" in template)\r\n                && !(\"element\" in template)\r\n            ) {\r\n                options = template;\r\n                template = void 0;\r\n            }\r\n        } else if (typeof styles === \"object\") {\r\n            options = styles;\r\n            styles = void 0;\r\n        }\r\n    }\r\n\r\n    return function (constructor: ComponentConstructor) {\r\n        ko.components.register(name, extendObject({\r\n            viewModel: constructor.length < 2 ? constructor : {\r\n                createViewModel(params: any, {\r\n                    element, templateNodes,\r\n                }: {\r\n                        element: Node, templateNodes: Node[],\r\n                    }) {\r\n                    return new constructor(params, element, templateNodes);\r\n                },\r\n            },\r\n            template: template || \"<!---->\",\r\n            synchronous: true,\r\n        }, options as Object));\r\n    };\r\n}\r\n\r\n/*---------------------------------------------------------------------------*/\r\n\r\n/**\r\n * Like https://github.com/jayphelps/core-decorators.js @autobind but less smart and complex\r\n * Do NOT use with ES6 inheritance!\r\n */\r\nexport function autobind(prototype: Object, key: string | symbol, desc: PropertyDescriptor) {\r\n    const { value, configurable, enumerable } = desc || (desc = getOwnPropertyDescriptor(prototype, key));\r\n    return {\r\n        // tslint:disable-next-line:object-literal-shorthand\r\n        configurable: configurable,\r\n        // tslint:disable-next-line:object-literal-shorthand\r\n        enumerable: enumerable,\r\n        get(this: Object) {\r\n            if (this === prototype) {\r\n                return value;\r\n            }\r\n            const bound = value.bind(this);\r\n            defineProperty(this, key, {\r\n                value: bound,\r\n            });\r\n            return bound;\r\n        },\r\n    } as PropertyDescriptor;\r\n}\r\n\r\n/*---------------------------------------------------------------------------*/\r\n\r\n/**\r\n * Define hidden ko.subscribable, that notifies subscribers when decorated method is invoked\r\n */\r\nexport function event(prototype: Object, key: string | symbol) {\r\n    defineProperty(prototype, key, {\r\n        get(this: Object) {\r\n            return defineEventProperty(this, key);\r\n        },\r\n    });\r\n}\r\n\r\nexport type EventType = Function & {\r\n    subscribe(callback: Function): KnockoutSubscription;\r\n};\r\n\r\n/*---------------------------------------------------------------------------*/\r\n\r\n/**\r\n * Subscribe callback to `@observable` or `@computed` dependency changes or to some `@event` property\r\n */\r\nexport function subscribe<T>(\r\n    dependencyOrEvent: () => T,\r\n    callback: (value: T) => void,\r\n    options?: { once?: boolean, event?: \"change\" | \"beforeChange\" },\r\n): KnockoutSubscription;\r\n/**\r\n * Subscribe callback to `@observableArray` dependency \"arrayChange\" event\r\n */\r\nexport function subscribe<T>(\r\n    dependency: () => T[],\r\n    callback: (value: {\r\n        status: \"added\" | \"deleted\";\r\n        value: T;\r\n        index: number;\r\n    }[]) => void,\r\n    options: { once?: boolean, event: \"arrayChange\" },\r\n): KnockoutSubscription;\r\n/**\r\n * Subscribe callback to some `@event` property\r\n */\r\nexport function subscribe<T>(\r\n    event: (arg: T) => void,\r\n    callback: (arg: T) => void,\r\n    options?: { once?: boolean },\r\n): KnockoutSubscription;\r\n/**\r\n * Subscribe callback to some `@event` property\r\n */\r\nexport function subscribe<T1, T2>(\r\n    event: (arg1: T1, arg2: T2) => void,\r\n    callback: (arg1: T1, arg2: T2) => void,\r\n    options?: { once?: boolean },\r\n): KnockoutSubscription;\r\n/**\r\n * Subscribe callback to some `@event` property\r\n */\r\nexport function subscribe<T1, T2, T3>(\r\n    event: (arg1: T1, arg2: T2, arg3: T3, ...args: any[]) => void,\r\n    callback: (arg1: T1, arg2: T2, arg3: T3, ...args: any[]) => void,\r\n    options?: { once?: boolean },\r\n): KnockoutSubscription;\r\n/**\r\n * Subscribe callback to `@observable` or `@computed` dependency changes or to some `@event`\r\n */\r\nexport function subscribe(\r\n    dependencyOrEvent: Function,\r\n    callback: (...args: any[]) => void,\r\n    options?: { once?: boolean, event?: \"change\" | \"beforeChange\" | \"arrayChange\" },\r\n) {\r\n    const once = options && options.once || false;\r\n\r\n    if (hasOwnProperty(dependencyOrEvent, \"subscribe\")) {\r\n        // overload: subscribe to @event property\r\n        const event = dependencyOrEvent as EventType;\r\n\r\n        if (once) {\r\n            const subscription = event.subscribe(function () {\r\n                subscription.dispose();\r\n                callback.apply(null, arguments);\r\n            });\r\n            return subscription;\r\n        } else {\r\n            return event.subscribe(callback);\r\n        }\r\n    } else {\r\n        // overload: subscribe to @observable or @computed\r\n        const event = options && options.event || \"change\";\r\n\r\n        let handler: (value: any) => void;\r\n        let subscription: KnockoutSubscription;\r\n\r\n        if (once) {\r\n            handler = function () {\r\n                subscription.dispose();\r\n                callback.apply(null, arguments);\r\n            };\r\n        } else {\r\n            handler = callback;\r\n        }\r\n\r\n        if (event === \"arrayChange\") {\r\n            const obsArray = dependencyOrEvent() as ObservableArray<any>;\r\n\r\n            if (isArray(obsArray) && hasOwnProperty(obsArray, PATCHED_KEY)) {\r\n                subscription = obsArray.subscribe(handler, null, event);\r\n            } else {\r\n                throw new Error(\"Can not subscribe to 'arrayChange' because dependency is not an 'observableArray'\");\r\n            }\r\n        } else {\r\n            const computed = ko.computed(dependencyOrEvent as () => any);\r\n\r\n            subscription = computed.subscribe(handler, null, event);\r\n\r\n            const originalDispose = subscription.dispose;\r\n            // dispose hidden computed with subscription\r\n            subscription.dispose = function (this: KnockoutSubscription) {\r\n                originalDispose.call(this);\r\n                computed.dispose();\r\n            };\r\n        }\r\n        return subscription;\r\n    }\r\n}\r\n\r\n/*---------------------------------------------------------------------------*/\r\n\r\n/**\r\n * Get internal ko.observable() for object property decodated by @observable\r\n */\r\nexport function unwrap(instance: Object, key: string | symbol): any;\r\n/**\r\n * Get internal ko.observable() for object property decodated by @observable\r\n */\r\nexport function unwrap<T>(instance: Object, key: string | symbol): KnockoutObservable<T>;\r\n/**\r\n * Get internal ko.observable() for object property decodated by @observable\r\n */\r\nexport function unwrap(instance: Object, key: string | symbol) {\r\n    if (!hasOwnProperty(instance, key)) {\r\n        // invoke getter on instance.__proto__ that defines property on instance\r\n        // tslint:disable-next-line:no-unused-expression\r\n        instance[key];\r\n    }\r\n    return getOwnPropertyDescriptor(instance, key).get;\r\n}\r\n\r\n/*---------------------------------------------------------------------------*/\r\n/**\r\n * Mixin which add `subscribe()` instance method and implement `dispose()` method,\r\n * that disposes all subscription created by `subscribe()`\r\n */\r\nexport interface Disposable {\r\n    /** Dispose all subscriptions from this class */\r\n    dispose(): void;\r\n\r\n    /** Subscribe callback to `@observable` or `@computed` dependency changes or to some `@event` property */\r\n    subscribe<T>(\r\n        dependencyOrEvent: () => T,\r\n        callback: (value: T) => void,\r\n        options?: { once?: boolean, event?: \"change\" | \"beforeChange\" },\r\n    ): KnockoutSubscription;\r\n    /** Subscribe callback to `@observableArray` dependency \"arrayChange\" event */\r\n    subscribe<T>(\r\n        dependency: () => T[],\r\n        callback: (value: {\r\n            status: \"added\" | \"deleted\";\r\n            value: T;\r\n            index: number;\r\n        }[]) => void,\r\n        options: { once?: boolean, event: \"arrayChange\" },\r\n    ): KnockoutSubscription;\r\n    /** Subscribe callback to some `@event` property */\r\n    subscribe<T>(\r\n        event: (arg: T) => void,\r\n        callback: (arg: T) => void,\r\n        options?: { once?: boolean },\r\n    ): KnockoutSubscription;\r\n    /** Subscribe callback to some `@event` property */\r\n    subscribe<T1, T2>(\r\n        event: (arg1: T1, arg2: T2) => void,\r\n        callback: (arg1: T1, arg2: T2) => void,\r\n        options?: { once?: boolean },\r\n    ): KnockoutSubscription;\r\n    /** Subscribe callback to some `@event` property */\r\n    subscribe<T1, T2, T3>(\r\n        event: (arg1: T1, arg2: T2, arg3: T3, ...args: any[]) => void,\r\n        callback: (arg1: T1, arg2: T2, arg3: T3, ...args: any[]) => void,\r\n        options?: { once?: boolean },\r\n    ): KnockoutSubscription;\r\n\r\n    /** Get internal ko.observable() for class property decodated by `@observable` */\r\n    unwrap(key: string | symbol): any;\r\n    /** Get internal ko.observable() for class property decodated by `@observable` */\r\n    unwrap<T>(key: string | symbol): KnockoutObservable<T>;\r\n}\r\n\r\n/**\r\n * Mixin which add `subscribe()` instance method and implement `dispose()` method,\r\n * that disposes all subscription created by `subscribe()`\r\n */\r\nexport function Disposable(): new () => Disposable;\r\n/**\r\n * Mixin which add `subscribe()` instance method and implement `dispose()` method,\r\n * that disposes all subscription created by `subscribe()`\r\n * @param Base {Function} Base class to extend\r\n */\r\nexport function Disposable<T extends Function>(\r\n    // tslint:disable-next-line:variable-name\r\n    Base: T,\r\n): new (...args: any[]) => Disposable & T\r\n/**\r\n * Mixin which add `subscribe()` instance method and implement `dispose()` method,\r\n * that disposes all subscription created by `subscribe()`\r\n * @param Base {Function} Base class to extend\r\n */\r\nexport function Disposable<T extends new (...args: any[]) => any>(\r\n    // tslint:disable-next-line:variable-name\r\n    Base?: T,\r\n) {\r\n    if (typeof Base === \"undefined\") {\r\n        Base = class { } as T;\r\n    }\r\n    return class extends Base {\r\n        /** Dispose all subscriptions from this class */\r\n        dispose() {\r\n            const subscriptions: KnockoutSubscription[] = this[SUBSCRIPTIONS_KEY];\r\n            if (subscriptions) {\r\n                subscriptions.forEach((subscription) => {\r\n                    subscription.dispose();\r\n                });\r\n                delete this[SUBSCRIPTIONS_KEY];\r\n            }\r\n        }\r\n\r\n        /** Subscribe callback to `@observable` or `@computed` dependency changes or to some `@event` */\r\n        subscribe() {\r\n            const subscription: KnockoutSubscription = subscribe.apply(null, arguments);\r\n            const subscriptions: KnockoutSubscription[] = this[SUBSCRIPTIONS_KEY] || (this[SUBSCRIPTIONS_KEY] = []);\r\n            subscriptions.push(subscription);\r\n            return subscription;\r\n        }\r\n\r\n        /** Get internal ko.observable() for class property decodated by `@observable` */\r\n        unwrap(key: string) {\r\n            return unwrap(this, key);\r\n        }\r\n    };\r\n}\r\n","/**\r\n * Copyright (c) 2016-2017 Dmitry Panyushkin\r\n * Available under MIT license\r\n */\r\nimport * as ko from \"knockout\";\r\nimport { arraySlice, defineProperty } from \"./common-functions\";\r\nimport { EventType } from \"./knockout-decorators\";\r\n\r\nexport function defineEventProperty(instance: Object, key: string | symbol) {\r\n    const subscribable = new ko.subscribable<any[]>();\r\n\r\n    const event: EventType = function () {\r\n        const eventArgs = arraySlice(arguments);\r\n        subscribable.notifySubscribers(eventArgs);\r\n    } as any;\r\n\r\n    event.subscribe = function (callback: Function) {\r\n        return subscribable.subscribe(function (eventArgs: any[]) {\r\n            callback.apply(null, eventArgs);\r\n        });\r\n    };\r\n\r\n    defineProperty(instance, key, {\r\n        value: event,\r\n    });\r\n\r\n    return event;\r\n}\r\n"],"names":["prefix","PATCHED_KEY","EXTENDERS_KEY","SUBSCRIPTIONS_KEY","Symbol","ArrayPrototype","Array","prototype","instance","key","descriptor","configurable","Object","defineProperty","extendObject","ko.utils","extend","objectForEach","isArray","bind","getPrototypeOf","getOwnPropertyDescriptor","hasOwnProperty","Function","call","arraySlice","slice","target","dictionary","extenders","forEach","extender","koExtender","value","deep","observable","applyExtenders","ko.observable","setter","newValue","prepareDeepValue","enumerable","get","set","prepareDeepObject","constructor","defineObservableArray","defineObservableProperty","observableArrayOption","deepObservableOption","computedDecoratorOptions","deepArrayMethods","allArrayMethods","deepObservableArrayMethods","allObservableArrayMethods","allMethods","obsArray","ko.observableArray","insideObsArray","array","lastValue","peek","fnName","i","length","apply","arguments","result","push","args","unshift","splice","oldItem","newItem","replace","mutator","nativeArray","valueWillMutate","valueHasMutated","index","propKey","Error","toString","this","desc","options","_a","computed","ko.computed","dependencyOrEvent","callback","once","event_1","subscription_1","subscribe","dispose","subscription_2","event_2","event","handler","computed_1","originalDispose_1","prototypeOrOptions","observableDecorator","prototypeOrOptinos","propDesc","pure","computedDecorator","extendersOrFactory","existingKey","defineExtenders","name","template","styles","ko.components","register","viewModel","createViewModel","params","element","templateNodes","synchronous","bound","subscribable","ko.subscribable","eventArgs","notifySubscribers","defineEventProperty","Base","tslib_1.__extends","class_2","subscriptions","subscription","unwrap"],"mappings":"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"}