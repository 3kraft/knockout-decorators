{"version":3,"file":null,"sources":["../src/knockout-decorators.ts"],"sourcesContent":["import * as ko from \"knockout\";\r\n\r\nexport interface ComponentConstructor {\r\n    new (\r\n        params?: any,\r\n        element?: Node,\r\n        templateNodes?: Node[]\r\n    ): any;\r\n}\r\n\r\nexport type ComponentDecorator = (constructor: ComponentConstructor) => void;\r\n\r\nexport type TemplateConfig = (\r\n    string\r\n    | Node[] \r\n    | DocumentFragment \r\n    | { require: string }\r\n    | { element: string | Node }\r\n);\r\n\r\nconst assign = ko.utils.extend;\r\nconst objectForEach = ko.utils.objectForEach;\r\nconst defProp = Object.defineProperty.bind(Object);\r\nconst getDescriptor = Object.getOwnPropertyDescriptor.bind(Object);\r\nconst slice = Function.prototype.call.bind(Array.prototype.slice);\r\n\r\n/**\r\n * Register Knockout component by decorating ViewModel class\r\n */\r\nexport function component(\r\n    name: string,\r\n    options?: Object\r\n): ComponentDecorator;\r\nexport function component(\r\n    name: string,\r\n    template: TemplateConfig,\r\n    options?: Object\r\n): ComponentDecorator;\r\nexport function component(\r\n    name: string,\r\n    template: TemplateConfig,\r\n    styles: string | string[],\r\n    options?: Object\r\n): ComponentDecorator;\r\n\r\n/**\r\n * Register Knockout component by decorating ViewModel class\r\n * @param name { String } Name of component\r\n * @param template { Any } Knockout template definition\r\n * @param styles { Any } Ignored parameter (used for `require()` styles by webpack etc.)\r\n * @param options { Object } Another options that passed directly to `ko.components.register()`\r\n */\r\nexport function component(\r\n    name: string,\r\n    template?: any,\r\n    styles?: any,\r\n    options?: Object\r\n) {\r\n    if (options === void 0) {\r\n        if (styles === void 0) {\r\n            if (typeof template === \"object\"\r\n                && template.constructor === Object\r\n                && !(\"require\" in template)\r\n                && !(\"element\" in template)\r\n            ) {\r\n                options = template;\r\n                template = void 0;\r\n            }\r\n        } else if (typeof styles === \"object\") {\r\n            options = styles;\r\n            styles = void 0;\r\n        }\r\n    }\r\n\r\n    return function (constructor: ComponentConstructor) {\r\n        ko.components.register(name, assign({\r\n            viewModel: constructor.length < 2 ? constructor : {\r\n                createViewModel(params, { element, templateNodes }) {\r\n                    return new constructor(params, element, templateNodes);\r\n                }\r\n            },\r\n            template: template || \"<!---->\",\r\n            synchronous: true,\r\n        }, options));\r\n    }\r\n}\r\n\r\nconst DECORATORS_KEY = typeof Symbol !== \"undefined\"\r\n    ? Symbol(\"ko_decorators\") : \"__ko_decorators_\";\r\n\r\nconst SUBSCRIPTIONS_KEY = typeof Symbol !== \"undefined\"\r\n    ? Symbol(\"ko_decorators_subscriptions\") : \"__ko_decorators_subscriptions_\";\r\n\r\nconst DISPOSABLE_KEY = typeof Symbol !== \"undefined\"\r\n    ? Symbol(\"ko_decorators_disposable\") : \"__ko_decorators_disposable_\";\r\n\r\nexport interface Disposable {\r\n    dispose(): void,\r\n}\r\n\r\nconst enum DecoratorType {\r\n    Extend, Subscribe,\r\n}\r\n\r\ninterface Decorator {\r\n    type: DecoratorType,\r\n    value: any,\r\n    event?: string,\r\n    dispose?: boolean,\r\n}\r\n\r\ninterface DecoratorsMetaData {\r\n    [propName: string]: Decorator[],\r\n}\r\n\r\nfunction getMetaData(prototype: Object) {\r\n    let metaData: DecoratorsMetaData = prototype[DECORATORS_KEY];\r\n    if (!prototype.hasOwnProperty(DECORATORS_KEY)) {\r\n        prototype[DECORATORS_KEY] = metaData = assign({}, metaData);\r\n        objectForEach(metaData, (key, decorators) => {\r\n            metaData[key] = [...decorators];\r\n        });\r\n    }\r\n    return metaData;\r\n}\r\n\r\nfunction getDecorators(metaData: DecoratorsMetaData, key: string | symbol) {\r\n    return metaData[key] || (metaData[key] = []);\r\n}\r\n\r\nfunction getSubscriptions(instance: Object): Disposable[] {\r\n    return instance[SUBSCRIPTIONS_KEY] || (instance[SUBSCRIPTIONS_KEY] = []);\r\n}\r\n\r\nfunction applyDecorators(\r\n    instance: Object, key: string | symbol,\r\n    target: ko.Observable<any> | ko.PureComputed<any>\r\n) {\r\n    const metaData: DecoratorsMetaData = instance[DECORATORS_KEY];\r\n    const decorators = metaData && metaData[key];\r\n    if (decorators) {\r\n        decorators.forEach(d => {\r\n            switch (d.type) {\r\n                case DecoratorType.Extend:\r\n                    const extenders = d.value instanceof Function\r\n                        ? d.value.call(instance) : d.value;\r\n                    target = target.extend(extenders);\r\n                    break;\r\n                case DecoratorType.Subscribe:\r\n                    const subscription = target.subscribe(d.value, instance, d.event);\r\n                    if (d.dispose) {\r\n                        getSubscriptions(instance).push(subscription);\r\n                    }\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n    return target;\r\n}\r\n\r\nfunction redefineDispose(prototype: Object) {\r\n    if (prototype[DISPOSABLE_KEY]) { return; }\r\n    prototype[DISPOSABLE_KEY] = true;\r\n\r\n    const original = prototype[\"dispose\"];\r\n    prototype[\"dispose\"] = function dispose() {\r\n        const disposables = this[SUBSCRIPTIONS_KEY] as Disposable[];\r\n        if (disposables) {\r\n            disposables.forEach(s => { s.dispose(); });\r\n        }\r\n        if (original) {\r\n            return original.apply(this, arguments);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Property decorator that creates hidden ko.observable with ES6 getter and setter for it\r\n */\r\nexport function observable(prototype: Object, key: string | symbol) {\r\n    defProp(prototype, key, {\r\n        configurable: true,\r\n        get() {\r\n            const observable = applyDecorators(this, key, ko.observable());\r\n            defProp(this, key, { configurable: true, get: observable, set: observable });\r\n            return observable();\r\n        },\r\n        set(value) {\r\n            const observable = applyDecorators(this, key, ko.observable());\r\n            defProp(this, key, { configurable: true, get: observable, set: observable });\r\n            observable(value);\r\n        },\r\n    });\r\n}\r\n\r\ntype ObsArray = ko.ObservableArray<any> & { [fnName: string]: Function };\r\n\r\nconst arrayMethods = [\"pop\", \"push\", \"reverse\", \"shift\", \"sort\", \"splice\", \"unshift\"];\r\nconst observableArrayMethods = [\"remove\", \"removeAll\", \"destroy\", \"destroyAll\", \"replace\", \"subscribe\"];\r\n\r\nfunction defObservableArray(instance: Object, key: string | symbol) {\r\n    const obsArray = applyDecorators(instance, key, ko.observableArray()) as ObsArray;\r\n    \r\n    let insideObsArray = false;\r\n    defProp(instance, key, {\r\n        configurable: true,\r\n        get: obsArray,\r\n        set(array: any[]) {\r\n            if (array) {\r\n                arrayMethods.forEach(fnName => defProp(array, fnName, {\r\n                    configurable: true,\r\n                    enumerable: false,\r\n                    value() {\r\n                        if (insideObsArray) {\r\n                            return Array.prototype[fnName].apply(array, arguments);\r\n                        }\r\n                        insideObsArray = true;\r\n                        const result = obsArray[fnName].apply(obsArray, arguments);\r\n                        insideObsArray = false;\r\n                        return result;\r\n                    }\r\n                }));\r\n                observableArrayMethods.forEach(fnName => defProp(array, fnName, {\r\n                    configurable: true,\r\n                    enumerable: false,\r\n                    value() {\r\n                        insideObsArray = true;\r\n                        const result = obsArray[fnName].apply(obsArray, arguments);\r\n                        insideObsArray = false;\r\n                        return result;\r\n                    }\r\n                }));\r\n            }\r\n            insideObsArray = true;\r\n            obsArray(array);\r\n            insideObsArray = false;\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Property decorator that creates hidden ko.observableArray with ES6 getter and setter for it\r\n */\r\nexport function observableArray(prototype: Object, key: string | symbol) {\r\n    defProp(prototype, key, {\r\n        configurable: true,\r\n        get() {\r\n            defObservableArray(this, key);\r\n            return this[key];\r\n        },\r\n        set(value: any[]) {\r\n            defObservableArray(this, key);\r\n            return this[key] = value;\r\n        },\r\n    });\r\n}\r\n\r\nexport interface ObservableArray<T> extends Array<T> {\r\n    replace(oldItem: T, newItem: T): void;\r\n\r\n    remove(item: T): T[];\r\n    remove(removeFunction: (item: T) => boolean): T[];\r\n    \r\n    removeAll(): T[];\r\n    removeAll(items: T[]): T[];\r\n\r\n    destroy(item: T): void;\r\n    destroy(destroyFunction: (item: T) => boolean): void;\r\n    \r\n    destroyAll(): void;\r\n    destroyAll(items: T[]): void;\r\n\r\n    subscribe(callback: (val: T[]) => void): Disposable;\r\n    subscribe(callback: (val: T[]) => void, callbackTarget: any): Disposable;\r\n    subscribe(callback: (val: any[]) => void, callbackTarget: any, event: string): Disposable;\r\n}\r\n\r\n/**\r\n * Accessor decorator that wraps ES6 getter and setter to hidden ko.pureComputed\r\n */\r\nexport function computed(prototype: Object, key: string | symbol, desc: PropertyDescriptor) {\r\n    const { get, set } = desc || (desc = getDescriptor(prototype, key));\r\n    desc.get = function () {\r\n        const computed = ko.pureComputed(get, this);\r\n        defProp(this, key, { configurable: true, get: computed, set: set });\r\n        return computed();\r\n    };\r\n    return desc;\r\n    // TODO: make @computed extendable (by @extend decorator)\r\n}\r\n\r\n/**\r\n * Replace original method with factory that produces ko.computed from original method\r\n */\r\nexport function observer(autoDispose: boolean): MethodDecorator;\r\nexport function observer(prototype: Object, key: string | symbol, desc: PropertyDescriptor): PropertyDescriptor;\r\n\r\n/**\r\n * Replace original method with factory that produces ko.computed from original method\r\n * @param autoDispose { Boolean } if true then subscription will be disposed when entire ViewModel is disposed\r\n */\r\nexport function observer(\r\n    prototypeOrAutoDispose: Object | boolean, key?: string | symbol, desc?: PropertyDescriptor\r\n) {\r\n    let autoDispose: boolean;\r\n    if (typeof prototypeOrAutoDispose === \"boolean\" && key === void 0) {\r\n        autoDispose = prototypeOrAutoDispose;         // @observer(false)\r\n        return decorator;                             // onSomethingChange() {}\r\n    } else if (typeof prototypeOrAutoDispose === \"object\" && key !== void 0) {\r\n        autoDispose = true;                           // @observer\r\n        decorator(prototypeOrAutoDispose, key, desc); // onSomethingChange() {}\r\n    } else {\r\n        throw new Error(\"Can not use @observer decorator this way\");\r\n    }\r\n\r\n    function decorator(prototype: Object, key: string | symbol, desc: PropertyDescriptor) {\r\n        const { value } = desc || (desc = getDescriptor(prototype, key));\r\n        desc.value = function () {\r\n            const args = slice(arguments);\r\n            const computed = ko.computed(() => value.apply(this, args));\r\n            if (autoDispose) {\r\n                getSubscriptions(this).push(computed);\r\n            }\r\n            return computed;\r\n        };\r\n        if (autoDispose) {\r\n            redefineDispose(prototype);\r\n        }\r\n        return desc;\r\n    }\r\n}\r\n\r\n/**\r\n * Apply extenders to decorated @observable\r\n */\r\nexport function extend(extenders: Object): PropertyDecorator;\r\nexport function extend(extendersFactory: () => Object): PropertyDecorator;\r\n\r\n/**\r\n * Apply extenders to decorated @observable\r\n * @extendersOrFactory { Object | Function } Knockout extenders definition or factory that produces definition\r\n */\r\nexport function extend(extendersOrFactory: Object | Function) {\r\n    return function (prototype: Object, key: string | symbol) {\r\n        getDecorators(getMetaData(prototype), key).push({\r\n            type: DecoratorType.Extend,\r\n            value: extendersOrFactory,\r\n        });\r\n    }\r\n}\r\n\r\n/**\r\n * Subscribe to @observable by name or by specifying callback explicitely\r\n */\r\nexport function subscribe(callback: (value: any) => void, event?: string, autoDispose?: boolean): PropertyDecorator;\r\nexport function subscribe(targetOrCallback: string | symbol, event?: string, autoDispose?: boolean): PropertyDecorator;\r\nexport function subscribe(targetOrCallback: string | symbol, event?: string, autoDispose?: boolean): MethodDecorator;\r\n\r\n/**\r\n * Subscribe to @observable by name or by specifying callback explicitely\r\n * @param targetOrCallback { String | Function } name of callback or callback itself\r\n * when observable is decorated and name of observable property when callback is decorated\r\n * @param event { String } Knockout subscription event name\r\n * @param autoDispose { Boolean } if true then subscription will be disposed when entire ViewModel is disposed\r\n */\r\nexport function subscribe(\r\n    targetOrCallback: string | symbol | Function, event?: string, autoDispose = true\r\n) {\r\n    return function (prototype: Object, key: string | symbol, desc: PropertyDescriptor) {\r\n        const { value, get } = desc || (desc = getDescriptor(prototype, key));\r\n        let targetKey: string | symbol;\r\n        let callback: Function;\r\n        if (typeof value === \"function\") {\r\n            if (typeof targetOrCallback === \"string\" || typeof targetOrCallback === \"symbol\") {\r\n                targetKey = targetOrCallback;                   // @subscribe(\"target\")\r\n                callback = value;                               // callback(value) {}    \r\n            } else {\r\n                throw new Error(\"Subscription target should be a key in decorated ViewModel\");\r\n            }\r\n        } else if (typeof get === \"function\") {\r\n            if (typeof targetOrCallback === \"function\") {\r\n                targetKey = key;                                // @subscribe(ViewModel.prototype.callback)\r\n                callback = targetOrCallback;                    // @observable target;\r\n            } else if (typeof targetOrCallback === \"string\" || typeof targetOrCallback === \"symbol\") {\r\n                targetKey = key;                                // @subscribe(\"callback\")\r\n                callback = prototype[targetOrCallback];         // @observable target;\r\n            } else {\r\n                throw new Error(\"Subscription callback should be a function or key in decorated ViewModel\");\r\n            }\r\n        }\r\n        getDecorators(getMetaData(prototype), targetKey).push({\r\n            type: DecoratorType.Subscribe,\r\n            value: callback,\r\n            event: event,\r\n            dispose: autoDispose,\r\n        });\r\n        if (autoDispose) {\r\n            redefineDispose(prototype);\r\n        }\r\n        return desc as any;\r\n    }\r\n}\r\n\r\n/**\r\n * Like https://github.com/jayphelps/core-decorators.js @autobind but less smart and complex\r\n * Do NOT use with ES6 inheritance!\r\n */\r\nexport function autobind(prototype: Object, key: string | symbol, desc: PropertyDescriptor) {\r\n    const { value, configurable, enumerable } = desc || (desc = getDescriptor(prototype, key));\r\n    return {\r\n        configurable: configurable,\r\n        enumerable: enumerable,\r\n        get() {\r\n            if (this === prototype) {\r\n                return value;\r\n            }\r\n            const bound = value.bind(this);\r\n            defProp(this, key, {\r\n                configurable: true,\r\n                enumerable: false,\r\n                value: bound,\r\n            });\r\n            return bound;\r\n        }\r\n    } as PropertyDescriptor;\r\n}"],"names":["name","template","styles","options","constructor","Object","ko","components","register","assign","viewModel","length","createViewModel","params","_a","element","templateNodes","synchronous","prototype","metaData","DECORATORS_KEY","hasOwnProperty","objectForEach","key","decorators","instance","SUBSCRIPTIONS_KEY","target","forEach","d","type","DecoratorType","Extend","extenders","value","Function","call","extend","Subscribe","subscription","subscribe","event","dispose","getSubscriptions","push","DISPOSABLE_KEY","original","disposables","this","s","apply","arguments","defProp","configurable","get","observable","applyDecorators","set","obsArray","observableArray","insideObsArray","array","arrayMethods","fnName","enumerable","Array","result","observableArrayMethods","defObservableArray","desc","computed","pureComputed","prototypeOrAutoDispose","args","slice","_this","autoDispose","redefineDispose","decorator","Error","extendersOrFactory","getDecorators","getMetaData","targetOrCallback","targetKey","callback","bound","bind","utils","defineProperty","getDescriptor","getOwnPropertyDescriptor","Symbol"],"mappings":"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"}